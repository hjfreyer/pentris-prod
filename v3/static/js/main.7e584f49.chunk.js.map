{"version":3,"sources":["registerServiceWorker.ts","views/Board.tsx","game/shape-data.ts","game/shape.ts","game/state.ts","views/PiecePreview.tsx","views/App.tsx","game/randomizer.ts","game/factory.ts","ui/state.ts","pages/index.tsx","pages/shape-test.tsx","index.ts","ui/input.ts"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","cellClassName","c","kind","concat","shapeIdx","Board","react","className","cells","map","row","rowIdx","key","cell","cellIdx","mirrorY","t","_ref","_ref2","Object","slicedToArray","pentominoF","pentominoL","pentominoN","pentominoP","pentominoY","pentominoZ","PENTOMINOES","tetrominoJ","tetrominoL","tetrominoS","tetrominoZ","shapes","NUM_SHAPES","length","getTiles","s","res","idx","count","_center","_boundingBox5","boundingBox","_boundingBox6","minRow","minCol","maxRow","squareSide","rowOffsetIntoSquare","Math","ceil","center","_center2","centerRow","centerCol","translate","i","_ref7","_ref8","col","rotate","rot","introduceShape","width","_boundingBox","_boundingBox2","maxCol","floor","dRow","dCol","rows","_ref3","_ref4","cols","_ref5","_ref6","min","apply","toConsumableArray","max","View","levelTable","classCallCheck","this","createClass","value","lines","minLevel","getLevel","getSpeed","gravity","multiplier","Controller","rand","p","height","nextShapeIdx","nextShape","activeShape","shape","dasDirection","dasDelay","softDrop","entryDelay","board","makeGrid","score","toppedOut","_this","produce","doDAS","doEntry","doGravity","doLockDown","_this2","left","attemptMoveActive","right","down","action","doDrop","view","getGravity","flattenBoard","fullRows","_loop","push","newBoard","src","dest","includes","getMultiplier","pow","shapeClips","Array","fill","slice","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","shp","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","v","_iterator2","_ret","dRot","newActive","PiecePreview","_shape$justifiedTiles","_boundingBox3","_boundingBox4","_shape$justifiedTiles2","justified","grid","from","views_Board","App","dispatch","updateStartingSpeed","e","update","objectSpread","startingSpeed","target","valueAsNumber","type","prefs","onChange","autoFocus","onClick","game","gs","views_PiecePreview","hidden","NBagRandomizer","n","bag","_","k","array","j","shuffle","pop","levelToGravity","l","gameController","a","tick","input","start","updatePrefs","newState","_input","_x","_x2","arguments","toString","up","LOCAL_STORAGE_PREFS_KEY","keyToInput","id","sIdx","shapeTest","root","document","getElementById","ReactDOM","shape_test_App","pathname","manualActions","rx","ticks","pipe","rxop","keyDowns","keyUps","inputActions","raw","deduped","button","group","_rxop$partition","_rxop$partition2","dir","init","currentDir","acc","val","pressed","currentAction","currentDirInputs","direction","currentActionInputs","allActions","number","g","abs","randomizer","Prando","factory","uiController","ui","preferences","localStorage","JSON","parse","initial","initialState","doms","after","stringify","saveLocalStorage","views_App","subscribe","d","index","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7e584f49.chunk.js","sourcesContent":["// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\n\nimport * as gs from '../game/state';\n\nimport './Board.css';\n\nexport type State = {\n  cells : gs.GridCell[][],\n};\n\nfunction cellClassName(c: gs.GridCell): string {\n  switch (c.kind) {\n    case 'empty': return 'cell empty';\n    case 'shape': return `cell color-${c.shapeIdx}`\n  }\n}\n\nfunction Board(state : State): JSX.Element {\n  return (\n    <div className=\"Board\">\n      {state.cells.map(\n        (row, rowIdx) => <div className=\"row\" key={rowIdx}>\n          {\n            row.map((cell, cellIdx) =>\n              <div className={cellClassName(cell)} key={cellIdx}/>\n            )\n          }\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Board;\n","\ntype Tiles = Array<[number, number]>;\n\nexport function mirrorY(t: Tiles): Tiles {\n  return t.map(([row, col]) => [row, -col]);\n}\n\n// Pentominos.\n\nconst pentominoF: Tiles = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 1],\n];\n\nconst pentominoI: Tiles = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [0, 4],\n];\n\nconst pentominoL: Tiles = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [1, 3],\n];\n\nconst pentominoN: Tiles = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst pentominoP: Tiles = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [1, 1],\n  [1, -1],\n];\n\nconst pentominoT: Tiles = [\n  [0, -1],\n  [0, 1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoU: Tiles = [\n  [0, 0],\n  [0, -1],\n  [0, 1],\n  [-1, 1],\n  [-1, -1],\n];\n\nconst pentominoV: Tiles = [\n  [0, -2],\n  [0, -1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoW: Tiles = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n  [1, 2],\n  [2, 2],\n];\n\nconst pentominoX: Tiles = [\n  [0, 0],\n  [-1, 0],\n  [1, 0],\n  [0, -1],\n  [0, 1],\n];\n\nconst pentominoY: Tiles = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [-1, 1],\n];\n\nconst pentominoZ: Tiles = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 0],\n  [1, 2],\n];\n\nconst pentominoF2: Tiles = mirrorY(pentominoF);\n\nconst pentominoJ: Tiles = mirrorY(pentominoL);\n\nconst pentominoN2: Tiles = mirrorY(pentominoN);\n\nconst pentominoQ: Tiles = mirrorY(pentominoP);\n\nconst pentominoY2: Tiles = mirrorY(pentominoY);\n\nconst pentominoS: Tiles = mirrorY(pentominoZ);\n\nconst PENTOMINOES: Tiles[] = [\n  pentominoF,\n  pentominoF2,\n  pentominoL,\n  pentominoJ,\n  pentominoN,\n  pentominoN2,\n  pentominoP,\n  pentominoQ,\n  pentominoY,\n  pentominoY2,\n  pentominoZ,\n  pentominoS,\n  pentominoT,\n  pentominoU,\n  pentominoV,\n  pentominoW,\n  pentominoX,\n  pentominoI,\n];\n\n// Tetrominos\n\nconst tetrominoI: Tiles = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst tetrominoJ: Tiles = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 2],\n];\n\nconst tetrominoL: Tiles = mirrorY(tetrominoJ);\n\nconst tetrominoO: Tiles = [\n  [0, 0],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n];\n\nconst tetrominoS: Tiles = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n];\n\nconst tetrominoZ: Tiles = mirrorY(tetrominoS);\n\nconst tetrominoT: Tiles = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 1],\n];\n\nconst TETROMINOES: Tiles[] = [\n  tetrominoI,\n  tetrominoJ,\n  tetrominoL,\n  tetrominoO,\n  tetrominoS,\n  tetrominoZ,\n  tetrominoT,\n];\n\n// Trominoes\n\nconst trominoI: Tiles = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n];\n\nconst trominoL: Tiles = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n];\n\nconst TROMINOES: Tiles[] = [\n  trominoI,\n  trominoL,\n];\n\nconst domino: Tiles = [\n  [0, 0],\n  [0, 1],\n];\n\nconst monomino: Tiles = [\n  [0, 0]\n];\n\nconst shapes: Tiles[] = [\n  monomino,\n  domino,\n  ...TROMINOES,\n  ...TETROMINOES,\n  ...PENTOMINOES\n];\n\nexport default shapes;\n","\nimport shapes from './shape-data';\n\nexport const NUM_SHAPES = shapes.length;\n\nexport type Tiles = Array<[number, number]>;\nexport type Shape = {\n  idx: number\n  row: number\n  col: number\n  rot: number\n};\n\nexport function getTiles(s: Shape): Tiles {\n  let res = shapes[s.idx];\n  res = rotate(res, s.rot);\n  res = translate(res, s.row, s.col);\n  return res;\n}\n\nexport function introduceShape(idx: number, width: number): Shape {\n  const [, minCol, maxRow, maxCol] = boundingBox(shapes[idx]);\n  const row = -maxRow;\n  const col = Math.floor((width - maxCol + minCol) / 2) - minCol;\n  return { idx, row, col, rot: 0 };\n}\n\nexport function justifiedTiles(idx: number): [Tiles, number, number] {\n  const t = shapes[idx];\n  const [minRow, minCol, maxRow, maxCol] = boundingBox(t);\n  return [\n    translate(t, -minRow, -minCol),\n    maxRow - minRow + 1,\n    maxCol - minCol + 1,\n  ];\n}\n\nfunction translate(t: Tiles, dRow: number, dCol: number): Tiles {\n  return t.map(([row, col]) => [row + dRow, col + dCol]);\n}\n\nfunction boundingBox(t: Tiles): [number, number, number, number] {\n  const rows = t.map(([row, _]) => row);\n  const cols = t.map(([_, col]) => col);\n  return [Math.min(...rows), Math.min(...cols),\n  Math.max(...rows), Math.max(...cols)];\n}\n\nfunction center(t: Tiles): [number, number] {\n  const [minRow, minCol, maxRow, maxCol] = boundingBox(t);\n\n  // The side length of a square surrounding the shape. Assumes shapes are\n  // always oriented horizontally.\n  const squareSide = maxCol - minCol;\n  const rowOffsetIntoSquare = Math.ceil((squareSide - (maxRow - minRow)) / 2);\n  const squareMinRow = minRow - rowOffsetIntoSquare;\n  const centerRow = squareMinRow + squareSide / 2;\n  const centerCol = minCol + squareSide / 2;\n\n  return [centerRow, centerCol];\n}\n\nfunction rotate(t: Tiles, count: number) {\n  const [centerRow, centerCol] = center(t);\n\n  let res = t;\n  res = translate(res, -centerRow, -centerCol);\n  for (let i = 0; i < count; i++) {\n    res = res.map(([row, col]) => [col, -row]);\n  }\n  return translate(res, centerRow, centerCol);\n}\n","\nimport produce from 'immer';\n\nimport * as randomizer from './randomizer';\nimport * as shape from './shape';\n\nconst DAS_INITIAL_DELAY = 16;\nconst DAS_REFRESH_DELAY = 6;\nconst ENTRY_DELAY = 18;\nconst LINES_PER_LEVEL = 10;\nconst SOFT_DROP_MULTIPLIER = 5;\n\nexport type ActionButton = 'SPIN' | 'DROP'\nexport type ControllerInput = {\n  left: boolean\n  right: boolean\n  down: boolean\n  action: 'NONE' | ActionButton\n}\n\ntype EmptyCell = { kind: 'empty' };\ntype ShapeCell = {\n  kind: 'shape'\n  shapeIdx: number\n}\nexport type GridCell = EmptyCell | ShapeCell;\n\nexport type LevelInfo = {\n  number: number\n  gravity: number\n  multiplier: number\n};\n\nexport type Parameters = {\n  minLevel: number\n};\n\nexport type State = {\n  width: number\n  height: number\n  nextShapeIdx: number\n  activeShape: shape.Shape\n\n  dasDirection: 'NONE' | 'LEFT' | 'RIGHT'\n  dasDelay: number\n\n  softDrop: boolean,\n\n  entryDelay: number\n  gravity: number\n  board: GridCell[][]\n\n  score: number\n  lines: number\n  minLevel: number\n  toppedOut: boolean\n};\n\nexport class View {\n  levelTable: LevelInfo[]\n\n  constructor(levelTable: LevelInfo[]) {\n    this.levelTable = levelTable;\n  }\n\n  getLevel(s: State): number {\n    return Math.min(Math.floor(s.lines / LINES_PER_LEVEL),\n      this.levelTable.length - 1);\n  }\n\n  private getSpeed(s: State): number {\n    return Math.min(Math.max(s.minLevel, this.getLevel(s)),\n      this.levelTable.length - 1);\n  }\n\n  getGravity(s: State): number {\n    return this.levelTable[this.getSpeed(s)].gravity;\n  }\n\n  getMultiplier(s: State): number {\n    return this.levelTable[this.getSpeed(s)].multiplier;\n  }\n}\n\nexport class Controller {\n  rand: randomizer.Randomizer\n  levelTable: LevelInfo[]\n\n  constructor(rand: randomizer.Randomizer, levelTable: LevelInfo[]) {\n    this.rand = rand;\n    this.levelTable = levelTable;\n  }\n\n  view(): View {\n    return new View(this.levelTable);\n  }\n\n  newState(p: Parameters): State {\n    return {\n      width: 12,\n      height: 24,\n      nextShapeIdx: this.rand.nextShape(),\n      activeShape: shape.introduceShape(this.rand.nextShape(), 12),\n      dasDirection: 'NONE',\n      dasDelay: 0,\n      softDrop: false,\n      entryDelay: ENTRY_DELAY,\n      gravity: this.levelTable[p.minLevel].gravity,\n      board: makeGrid(12, 24),\n      score: 0,\n      lines: 0,\n      minLevel: p.minLevel,\n      toppedOut: false,\n    };\n  }\n\n  tick(s: State): State {\n    if (s.toppedOut) { return s; }\n\n    return produce(s, (s: State) => {\n      this.doDAS(s);\n      if (!this.doEntry(s)) {\n        return;\n      }\n      if (!this.doGravity(s)) {\n        this.doLockDown(s);\n      }\n    });\n  }\n\n  input(s: State, i: ControllerInput): State {\n    if (s.toppedOut) { return s; }\n\n    return produce(s, s => {\n      if (i.left) {\n        if (s.dasDirection === 'NONE') {\n          attemptMoveActive(s, 0, -1, 0);\n          s.dasDelay = DAS_INITIAL_DELAY;\n        }\n        s.dasDirection = 'LEFT';\n      } else if (i.right) {\n        if (s.dasDirection === 'NONE') {\n          attemptMoveActive(s, 0, 1, 0);\n          s.dasDelay = DAS_INITIAL_DELAY;\n        }\n        s.dasDirection = 'RIGHT';\n      } else {\n        s.dasDirection = 'NONE';\n      }\n\n      s.softDrop = i.down;\n\n      switch (i.action) {\n        case 'NONE':\n          break;\n        case 'SPIN':\n          attemptMoveActive(s, 0, 0, 1);\n          break;\n        case 'DROP':\n          this.doDrop(s);\n          break;\n      }\n    });\n  }\n\n  private doEntry(s: State): boolean {\n    if (0 < s.entryDelay) {\n      s.entryDelay--;\n      return false;\n    }\n    return true;\n  }\n\n  private doDAS(s: State) {\n    if (s.dasDirection === 'NONE') {\n      return;\n    }\n    if (s.dasDelay === 0) {\n      s.dasDelay = DAS_REFRESH_DELAY;\n      attemptMoveActive(s, 0, s.dasDirection === 'LEFT' ? -1 : 1, 0);\n    } else {\n      s.dasDelay--;\n    }\n  }\n\n  private doGravity(s: State): boolean {\n    if (0 < s.gravity) {\n      s.gravity -= s.softDrop ? SOFT_DROP_MULTIPLIER : 1;\n      return true;\n    }\n\n    s.gravity = this.view().getGravity(s);\n    return attemptMoveActive(s, 1, 0, 0);\n  }\n\n  private doDrop(s: State) {\n    while (attemptMoveActive(s, 1, 0, 0)) { }\n    this.doLockDown(s);\n  }\n\n  private doLockDown(s: State) {\n    s.board = flattenBoard(s);\n    s.entryDelay = ENTRY_DELAY;\n    s.activeShape = shape.introduceShape(s.nextShapeIdx, s.width)\n    s.nextShapeIdx = this.rand.nextShape();\n\n    const fullRows: number[] = [];\n    for (let row = 0; row < s.height; row++) {\n      let allFull = (() => {\n        for (let col = 0; col < s.width; col++) {\n          if (s.board[row][col].kind === 'empty') {\n            return false;\n          }\n        }\n        return true;\n      })();\n\n      if (allFull) {\n        fullRows.push(row);\n      }\n    }\n\n    const newBoard = makeGrid(s.width, s.height);\n    let src = s.height - 1;\n    let dest = s.height - 1;\n    while (src >= 0) {\n      if (fullRows.includes(src)) {\n        src--;\n        continue;\n      }\n\n      for (let col = 0; col < s.width; col++) {\n        newBoard[dest][col] = s.board[src][col];\n      }\n      src--;\n      dest--;\n    }\n    s.board = newBoard;\n    s.score += (this.view().getMultiplier(s) *\n      (Math.pow(2, fullRows.length) - 1));\n    s.lines += fullRows.length;\n    s.toppedOut = shapeClips(s, s.activeShape);\n  }\n}\n\nfunction makeGrid(width: number, height: number): GridCell[][] {\n  const board: GridCell[][] = [];\n  for (let i = 0; i < height; i++) {\n    board.push(Array(width).fill({ kind: 'empty' }));\n  }\n  return board;\n}\n\nexport function flattenBoard(s: State): GridCell[][] {\n  const res = s.board.map(row => row.slice());\n\n  for (const [row, col] of shape.getTiles(s.activeShape)) {\n    if (row < 0) {\n      continue;\n    }\n    res[row][col] = {\r\n      kind: 'shape',\n      shapeIdx: s.activeShape.idx,\n    }\n  }\n\n  return res;\n}\n\nfunction shapeClips(s: State, shp: shape.Shape): boolean {\n  for (let [row, col] of shape.getTiles(shp)) {\n    const clips = (function() {\n      if (s.height <= row || col < 0 || s.width <= col) {\n        return true;\n      }\n      if (row < 0) {\n        return false;\n      }\n      return s.board[row][col].kind !== 'empty';\n    })();\n\n    if (clips) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptMoveActive(s: State, dRow: number, dCol: number, dRot: number): boolean {\n  const newActive: shape.Shape = {\n    idx: s.activeShape.idx,\n    row: s.activeShape.row + dRow,\n    col: s.activeShape.col + dCol,\n    rot: (s.activeShape.rot + dRot) % 4,\n  }\n\n  if (shapeClips(s, newActive)) {\n    return false;\n  }\n\n  s.activeShape = newActive;\n  return true;\n}\n","import * as React from 'react';\n\nimport * as gs from '../game/state';\nimport * as shape from '../game/shape';\nimport Board from './Board';\n\nexport type Properties = {\n  shapeIdx: number,\n};\n\nfunction PiecePreview({ shapeIdx }: Properties): JSX.Element {\n  const [justified, rows, cols] = shape.justifiedTiles(shapeIdx);\n  const grid = Array.from({ length: rows },\n    () => Array(cols).fill({ kind: 'empty' } as gs.GridCell));\n\n  for (const [row, col] of justified) {\n    grid[row][col] = { kind: 'shape', shapeIdx };\n  }\n  return (\n    <div className=\"PiecePreview\">\n      <Board cells={ grid } />\n    </div>\n  );\n}\n\nexport default PiecePreview;\n","import * as React from 'react';\n\nimport * as ui from '../ui/state';\nimport Board from './Board';\nimport * as gs from '../game/state';\nimport PiecePreview from './PiecePreview';\n\nimport './App.css';\n\nexport type Properties = {\n  state: ui.State\n  view: gs.View\n  dispatch: (a: ui.Action) => void\n}\n\nfunction App({state, view, dispatch}: Properties): JSX.Element {\n  const updateStartingSpeed = (\n    (e : React.ChangeEvent<HTMLInputElement>) => dispatch({\n    kind: 'update-prefs',\n    update: (p : ui.Preferences) => ({\n      ...p,\n      startingSpeed: e.target.valueAsNumber,\n    })\n  }));\n\n  switch (state.kind) {\n  case 'new_game':\n    return (\n      <div className= \"App\">\n        <div className=\"new-game\">\n          <h1>Pentris!</h1>\n          <p>v3beta: Now with Levels!!</p>\n\n          <div className=\"form-row\">\n            <label>Starting Speed</label>\n            <input type=\"range\" min=\"1\" max=\"30\"\n              value={state.prefs.startingSpeed}\n              onChange={updateStartingSpeed}/>\n            <input type=\"number\" min=\"1\" max=\"30\"\n              value={state.prefs.startingSpeed}\n              onChange={updateStartingSpeed}/>\n          </div>\n\n          <button className=\"btn btn-primary\" autoFocus onClick={()=> dispatch({kind: 'ui', action: 'START'})}>\n            New Game\n          </button>\n        </div>\n      </div>\n    )\n  case 'in_game':\n    const s = state.game;\n    return (<div className= \"App\">\n      <main>\n        <Board cells={ gs.flattenBoard(s) } />\n      </main>\n      <aside>\n        <h1>Pentris</h1>\n        <p className=\"copy\">\n          It's Beta.<br/>It's Delicious.<br/>It's Pentris.\n        </p>\n        <h2>Preview</h2>\n        <PiecePreview shapeIdx={s.nextShapeIdx}/>\n        <h3>Score</h3>\n        <h3>Lines Cleared</h3>\n        <p className=\"score\">{s.score}</p>\n        <p className=\"score\">{s.lines}</p>\n        <h3>Level</h3>\n        <h3>Speed</h3>\n        <p className=\"score\">{view.getLevel(s) + 1}</p>\n        <p className=\"score\">{view.getMultiplier(s)}</p>\n      </aside>\n      <div className=\"game-over\" hidden={!s.toppedOut}>\n        <div className=\"card\">\n          <h1>OWNED!</h1>\n          <p>Score: {s.score}</p>\n          <button className=\"btn btn-primary\"\n            onClick={()=> dispatch({kind: 'ui', action: 'START'})}>\n            New Game\n          </button>\n        </div>\n      </div>\n    </div>);\n  }\n}\n\nexport default App;\n","\nimport Prando from 'prando';\n\nimport * as shape from './shape';\n\nexport interface Randomizer {\n  nextShape(): number\n}\n\nexport class TrueRandomizer implements Randomizer {\n  rand: Prando\n\n  constructor(rand: Prando) {\n    this.rand = rand;\n  }\n\n  nextShape(): number {\n    return this.rand.nextInt(0, shape.NUM_SHAPES - 1);\n  }\n}\n\nexport class NBagRandomizer implements Randomizer {\n  rand: Prando\n  n: number\n  bag: number[]\n\n  constructor(rand: Prando, n: number) {\n    this.rand = rand;\n    this.n = n;\n    this.bag = [];\n  }\n\n  nextShape(): number {\n    if (this.bag.length === 0) {\n      this.bag = Array.from({ length: this.n * shape.NUM_SHAPES },\n        (_, k) => k % shape.NUM_SHAPES\n      )\n      shuffle(this.bag, this.rand);\n    }\n    return this.bag.pop() as number;\n  }\n}\n\nfunction shuffle<T>(array: T[], rand: Prando) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(rand.next() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n","import Prando from 'prando';\n\nimport * as gs from './state';\nimport * as randomizer from './randomizer';\n\nexport function newProdController(): gs.Controller {\n  const levelTable = Array.from({ length: 37 }, (_, idx): gs.LevelInfo => ({\n    number: idx + 1,\n    gravity: levelToGravity(idx),\n    multiplier: gravityToLevel(levelToGravity(idx)) + 1\n  }));\n\n  const gameController = new gs.Controller(\n    new randomizer.NBagRandomizer(new Prando(), 2),\n    levelTable);\n\n  return gameController;\n}\n\nfunction levelToGravity(l: number): number {\n  return Math.floor(48 * Math.pow(0.9, l));\n}\n\nfunction gravityToLevel(g: number): number {\n  // Math.abs fixes a weird issue involving -0.\n  return Math.abs(Math.floor(Math.log(g / 48) / Math.log(0.9)));\n}\n","\nimport produce from 'immer';\n\nimport * as gs from '../game/state';\nimport * as input from './input';\n\nexport type Preferences = {\n  startingSpeed: number\n}\n\ntype NewGameState = {\n  kind: \"new_game\"\n  prefs: Preferences\n}\n\ntype InGameState = {\n  kind: \"in_game\"\n  prefs: Preferences\n  game: gs.State\n}\n\nexport type State = NewGameState | InGameState;\n\nexport type Action = Tick | Input | UIAction | UpdatePrefs;\n\ntype UIAction = {\n  kind: 'ui'\n  action: 'START'\n}\ntype Tick = { kind: 'tick' };\ntype Input = {\n  kind: 'input'\n  input: input.ControllerInput\n}\ntype UpdatePrefs = {\n  kind: 'update-prefs'\n  update: (p: Preferences) => Preferences\n}\n\nexport class Controller {\n  gameController: gs.Controller\n\n  constructor(gameController: gs.Controller) {\n    this.gameController = gameController;\n  }\n\n  initialState(prefs?: Preferences): State {\n    if (prefs === undefined) {\n      prefs = {\n        startingSpeed: 1,\n      }\n    }\n    return { kind: \"new_game\", prefs };\n  }\n\n  apply(s: State, a: Action): State {\n    switch (a.kind) {\n      case \"tick\":\n        return this.tick(s);\n      case \"input\":\n        return this.input(s, a.input);\n      case \"ui\":\n        return this.start(s);\n      case \"update-prefs\":\n        return this.updatePrefs(s, a);\n    }\n  }\n\n  private start(s: State): State {\n    return {\n      kind: 'in_game',\n      prefs: s.prefs,\n      game: this.gameController.newState({\n        minLevel: s.prefs.startingSpeed - 1,\n      }),\n    }\n  }\n\n  private tick(s: State): State {\n    return produce(s, (s: State) => {\n      if (s.kind !== 'in_game') { return; }\n      s.game = this.gameController.tick(s.game);\n    });\n  }\n\n  private input(s: State, i: input.ControllerInput): State {\n    return produce(s, (s: State) => {\n      if (s.kind !== 'in_game') { return; }\n      s.game = this.gameController.input(s.game, i);\n    });\n  }\n\n  private updatePrefs(s: State, up: UpdatePrefs): State {\n    return { ...s, prefs: up.update(s.prefs) };\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\n\nimport App from '../views/App';\nimport * as input from '../ui/input';\nimport * as factory from '../game/factory';\nimport * as ui from '../ui/state';\n\nconst LOCAL_STORAGE_PREFS_KEY = 'prefs';\n\nfunction keyToInput(key: string): input.Button | null {\n  switch (key) {\n    case 'ArrowLeft':\n      return 'LEFT';\n    case 'ArrowRight':\n      return 'RIGHT';\n    case 'ArrowDown':\n      return 'DOWN';\n    case 'ArrowUp':\n      return 'SPIN';\n    case ' ':\n      return 'DROP';\n    default:\n      return null;\n  }\n}\n\nfunction saveLocalStorage(s: ui.State, a: ui.Action) {\n  if (a.kind !== 'update-prefs') {\n    return;\n  }\n  localStorage[LOCAL_STORAGE_PREFS_KEY] = JSON.stringify(s.prefs);\n}\n\nexport default function index() {\n  const manualActions = new rx.Subject<ui.Action>();\n  const ticks = rx.timer(0, 1000 / 60).pipe(\n    rxop.map((_): ui.Action => ({ kind: 'tick' }))\n  )\n\n  const keyDowns =\n    rx.fromEvent(document, \"keydown\") as rx.Observable<KeyboardEvent>;\n  const keyUps =\n    rx.fromEvent(document, \"keyup\") as rx.Observable<KeyboardEvent>;\n\n  const rawInputs: rx.Observable<input.RawInput> = rx.merge(keyUps, keyDowns).pipe(\n    rxop.map(e => ({ button: keyToInput(e.key), pressed: e.type === 'keydown' } as input.RawInput)),\n    rxop.filter(i => i.button != null),\n  )\n\n  const inputActions = input.parseInput(rawInputs).pipe(\n    rxop.map((input): ui.Action => ({ kind: 'input', input }))\n  );\n\n  const allActions = rx.merge(manualActions, inputActions, ticks);\n\n  const gameController = factory.newProdController();\n\n  const uiController = new ui.Controller(gameController);\n\n  let preferences: ui.Preferences = {\n    startingSpeed: 1,\n  };\n  if (LOCAL_STORAGE_PREFS_KEY in localStorage) {\n    preferences = JSON.parse(localStorage[LOCAL_STORAGE_PREFS_KEY]);\n  }\n\n  const initial = uiController.initialState(preferences);\n\n  const states = allActions.pipe(\n    rxop.scan<ui.Action, ui.State>((s, a) => {\n      const after = uiController.apply(s, a);\n      saveLocalStorage(after, a);\n      return after;\n    }, initial),\n    rxop.startWith(initial));\n\n  const doms = states.pipe(rxop.map(s =>\n    <App key=\"app\"\n      state = { s }\n      view = { gameController.view() }\n      dispatch = { a => manualActions.next(a) } />));\n\n  const root = document.getElementById('root') as HTMLElement;\n\n  doms.subscribe((d) => ReactDOM.render(d, root));\n}\n","\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport * as shape from '../game/shape';\nimport PiecePreview from '../views/PiecePreview';\n\nfunction App(): JSX.Element {\n  return <div id=\"shape-tests\">\n    <h1>Shape Tests</h1>\n    {\n      Array.from({length: shape.NUM_SHAPES}, (_, sIdx) => (\n        <div className=\"shape\">\n          <PiecePreview shapeIdx={sIdx} />\n        </div>\n      ))\n    }\n  </div>;\n}\n\nfunction shapeTest() {\n  const root = document.getElementById('root') as HTMLElement;\n  ReactDOM.render(<App/>, root);\n}\n\nexport default shapeTest;\n","\nimport registerServiceWorker from './registerServiceWorker';\nimport index from './pages/index';\nimport shapeTest from './pages/shape-test';\n\nimport './index.css';\n\nif (window.location.pathname === '/shape-test') {\n  shapeTest();\n} else {\n  index();\n}\nregisterServiceWorker();\n","\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\n\nexport type DirectionButton = 'LEFT' | 'RIGHT' | 'DOWN'\nexport type ActionButton = 'SPIN' | 'DROP'\n\nexport type Button = DirectionButton | ActionButton\nexport type RawInput = {\n  button: Button\n  pressed: boolean\n}\n\nexport type ControllerInput = {\n  left: boolean\n  right: boolean\n  down: boolean\n  action: 'NONE' | ActionButton\n}\n\nexport function parseInput(raw: rx.Observable<RawInput>):\n  rx.Observable<ControllerInput> {\n  // Filter out the OS's key repetitions. There's a \"repeated\" boolean on\n  // the event, but it doesn't have universal support so we figure it out.\n  const deduped: rx.Observable<RawInput> = raw.pipe(\n    rxop.groupBy(i => i.button),\n    rxop.map(group => group.pipe(rxop.distinctUntilKeyChanged('pressed'))),\n    rxop.mergeAll(),\n  );\n\n  const [dir, action] =\n    rxop.partition<RawInput>(i =>\n      i.button === 'LEFT'\n      || i.button === 'RIGHT'\n      || i.button === 'DOWN')(deduped);\n\n  const init: ControllerInput = {\n    left: false,\n    right: false,\n    down: false,\n    action: 'NONE',\n  };\n\n  const currentDir: rx.Observable<ControllerInput> = dir.pipe(\n    rxop.scan<RawInput, ControllerInput>((acc, val) => {\n      if (val.button === 'DOWN') {\n        return {\n          ...acc,\n          down: val.pressed,\n        };\n      }\n\n      if (val.button === 'LEFT') {\n        if (val.pressed) {\n          return {\n            ...acc,\n            left: true,\n            right: false,\n          };\n        } else {\n          return {\n            ...acc,\n            left: false,\n          }\n        }\n      }\n\n      if (val.button === 'RIGHT') {\n        if (val.pressed) {\n          return {\n            ...acc,\n            left: false,\n            right: true,\n          };\n        } else {\n          return {\n            ...acc,\n            right: false,\n          }\n        }\n      }\n      return acc;\n    }, init),\n    rxop.startWith(init),\n  );\n\n  const currentAction: rx.Observable<ActionButton | 'NONE'> = action.pipe(\n    rxop.filter(i => i.pressed),\n    rxop.map(i => i.button as ActionButton),\n  );\n\n  const currentDirInputs: rx.Observable<ControllerInput> = currentDir.pipe(\n    rxop.map(direction => ({ ...direction, action: 'NONE' })),\n  );\n\n  const currentActionInputs: rx.Observable<ControllerInput> = currentAction.pipe(\n    rxop.withLatestFrom(currentDir),\n    rxop.map(([action, direction]) => ({ ...direction, action })),\n  );\n\n  return rx.merge(currentDirInputs, currentActionInputs);\n}\n"],"sourceRoot":""}