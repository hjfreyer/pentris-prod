{"version":3,"sources":["Board.tsx","shape.ts","shapes.ts","PiecePreview.tsx","state.ts","App.tsx","randomizer.ts","registerServiceWorker.ts","index.tsx","input.ts"],"names":["cellClassName","c","kind","concat","shapeIdx","Board","state","react","className","cells","map","row","rowIdx","key","cell","cellIdx","mirrored","s","_ref","_ref2","Object","slicedToArray","bbox","rows","_ref5","_ref6","cols","_ref7","_ref8","Math","min","apply","toConsumableArray","max","pentominoF","pentominoL","pentominoN","pentominoP","pentominoY","pentominoZ","PENTOMINOES","shape","tetrominoJ","tetrominoL","tetrominoS","tetrominoZ","SHAPES","_center","_bbox","_bbox2","minRow","minCol","maxRow","maxCol","floor","center","_center2","cRow","cCol","_ref9","_ref10","col","PiecePreview","_shape$justified","_bbox3","_bbox4","_ref11","_ref12","_shape$justified2","justified","grid","Array","from","length","fill","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref4","value","_ref3","err","return","src_Board","Integrator","rand","levelTable","classCallCheck","this","createClass","width","height","nextShapeIdx","nextShape","activeShape","dRow","dCol","rotation","dasDirection","dasDelay","entryDelay","gravity","board","makeGrid","score","lines","a","doTick","doInput","l","attemptTranslateDirection","getLevelInfo","attemptMoveActive","_this","produce","doDAS","doEntry","doGravity","doLockDown","_this2","input","direction","action","doDrop","flattenBoard","fullRows","_loop","push","newBoard","src","dest","includes","multiplier","pow","i","getShape","res","filter","slice","dRot","newActive","shp","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","v","_iterator2","_ret","activeShapeClips","d","App","p","src_PiecePreview","integ","number","NBagRandomizer","n","bag","_","k","array","j","shuffle","pop","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","manualActions","rx","ticks","pipe","rxop","keyDowns","document","keyUps","keyToInput","levelToGravity","inputActions","raw","deduped","button","group","_rxop$partition","_rxop$partition2","dir","currentDir","acc","val","newButton","pressed","currentAction","currentDirInputs","currentActionInputs","e","type","actions","idx","g","abs","randomizer","Prando","initial","newState","doms","src_App","root","getElementById","subscribe","ReactDOM","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.92fbda10.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport './Board.css';\nimport * as state from './state';\n\nexport type State = {\n  cells : state.GridCell[][],\n};\n\nfunction cellClassName(c:state.GridCell):string {\n  switch (c.kind) {\n    case 'empty': return 'cell empty';\n    case 'shape': return `cell color-${c.shapeIdx}`\n  }\n}\n\nfunction Board(state : State): JSX.Element {\n  return (\n    <div className=\"Board\">\n      {state.cells.map(\n        (row, rowIdx) => <div className=\"row\" key={rowIdx}>\n          {\n            row.map((cell, cellIdx) =>\n              <div className={cellClassName(cell)} key={cellIdx}/>\n            )\n          }\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Board;\n","\nexport type Shape = Array<[number, number]>;\n\nexport function mirrored(s: Shape): Shape {\n  return s.map(([row, col]) => [row, -col]);\n}\n\nexport function transpose(s: Shape): Shape {\n  return s.map(([row, col]) => [col, row]);\n}\n\nexport function bbox(s: Shape): [number, number, number, number] {\n  const rows = s.map(([row, _]) => row);\n  const cols = s.map(([_, col]) => col);\n  return [Math.min(...rows), Math.min(...cols),\n  Math.max(...rows), Math.max(...cols)];\n}\n\nexport function center(s: Shape): [number, number] {\n  const [minRow, minCol, maxRow, maxCol] = bbox(s);\n  return [Math.floor((minRow + maxRow) / 2), Math.floor((minCol + maxCol) / 2)]\n}\n\nexport function centered(s: Shape): Shape {\n  const [cRow, cCol] = center(s);\n  return s.map(([row, col]) => [row - cRow, col - cCol]);\n}\n\nexport function justified(s: Shape): [Shape, number, number] {\n  const [minRow, minCol, maxRow, maxCol] = bbox(s);\n  return [\n    s.map(([row, col]) => [row - minRow, col - minCol]),\n    maxRow - minRow + 1,\n    maxCol - minCol + 1,\n  ];\n}\n","\nimport * as shape from './shape';\n\n// Pentominos.\n\nconst pentominoF: shape.Shape = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 1],\n];\n\nconst pentominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [0, 4],\n];\n\nconst pentominoL: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [1, 3],\n];\n\nconst pentominoN: shape.Shape = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst pentominoP: shape.Shape = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [1, 1],\n  [1, -1],\n];\n\nconst pentominoT: shape.Shape = [\n  [0, -1],\n  [0, 1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoU: shape.Shape = [\n  [0, 0],\n  [0, -1],\n  [0, 1],\n  [-1, 1],\n  [-1, -1],\n];\n\nconst pentominoV: shape.Shape = [\n  [0, -2],\n  [0, -1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoW: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n  [1, 2],\n  [2, 2],\n];\n\nconst pentominoX: shape.Shape = [\n  [0, 0],\n  [-1, 0],\n  [1, 0],\n  [0, -1],\n  [0, 1],\n];\n\nconst pentominoY: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [-1, 1],\n];\n\nconst pentominoZ: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 0],\n  [1, 2],\n];\n\nconst pentominoF2: shape.Shape = shape.mirrored(pentominoF);\n\nconst pentominoJ: shape.Shape = shape.mirrored(pentominoL);\n\nconst pentominoN2: shape.Shape = shape.mirrored(pentominoN);\n\nconst pentominoQ: shape.Shape = shape.mirrored(pentominoP);\n\nconst pentominoY2: shape.Shape = shape.mirrored(pentominoY);\n\nconst pentominoS: shape.Shape = shape.mirrored(pentominoZ);\n\nconst PENTOMINOES: shape.Shape[] = [\n  pentominoF,\n  pentominoF2,\n  pentominoL,\n  pentominoJ,\n  pentominoN,\n  pentominoN2,\n  pentominoP,\n  pentominoQ,\n  pentominoY,\n  pentominoY2,\n  pentominoZ,\n  pentominoS,\n  pentominoT,\n  pentominoU,\n  pentominoV,\n  pentominoW,\n  pentominoX,\n  pentominoI,\n];\n\n// Tetrominos\n\nconst tetrominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst tetrominoJ: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 2],\n];\n\nconst tetrominoL: shape.Shape = shape.mirrored(tetrominoJ);\n\nconst tetrominoO: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n];\n\nconst tetrominoS: shape.Shape = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n];\n\nconst tetrominoZ: shape.Shape = shape.mirrored(tetrominoS);\n\nconst tetrominoT: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 1],\n];\n\nconst TETROMINOES: shape.Shape[] = [\n  tetrominoI,\n  tetrominoJ,\n  tetrominoL,\n  tetrominoO,\n  tetrominoS,\n  tetrominoZ,\n  tetrominoT,\n];\n\n// Trominoes\n\nconst trominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n];\n\nconst trominoL: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n];\n\nconst TROMINOES: shape.Shape[] = [\n  trominoI,\n  trominoL,\n];\n\nconst domino: shape.Shape = [\n  [0, 0],\n  [0, 1],\n];\n\nconst monomino: shape.Shape = [\n  [0, 0]\n];\n\nconst SHAPES: shape.Shape[] = [\n  monomino,\n  domino,\n  ...TROMINOES,\n  ...TETROMINOES,\n  ...PENTOMINOES\n].map(shape.centered);\n\nexport default SHAPES;\n","import * as React from 'react';\n\nimport * as state from './state';\nimport * as shape from './shape';\nimport SHAPES from './shapes';\nimport Board from './Board';\n\nexport type Properties = {\n  shapeIdx: number,\n};\n\nfunction PiecePreview({ shapeIdx }: Properties): JSX.Element {\n  const [justified, rows, cols] = shape.justified(SHAPES[shapeIdx]);\n  const grid = Array.from({ length: rows },\n    () => Array(cols).fill({ kind: 'empty' } as state.GridCell));\n\n  for (const [row, col] of justified) {\n    grid[row][col] = { kind: 'shape', shapeIdx };\n  }\n  return (\n    <div className=\"PiecePreview\">\n      <Board cells={ grid } />\n    </div>\n  );\n}\n\nexport default PiecePreview;\n","\nimport produce from 'immer';\nimport * as shape from './shape';\nimport SHAPES from './shapes';\nimport * as input from './input';\nimport * as randomizer from './randomizer';\n\nconst DAS_INITIAL_DELAY = 16;\nconst DAS_REFRESH_DELAY = 6;\nconst ENTRY_DELAY = 18;\nconst LINES_PER_LEVEL = 10;\n\nexport type Action = Tick | Input;\n\ntype Tick = { kind: 'tick' };\ntype Input = {\n  kind: 'input'\n  input: input.ControllerInput\n}\n\ntype ActiveShape = {\n  shapeIdx: number\n  dRow: number\n  dCol: number\n  rotation: 0 | 1 | 2 | 3\n}\ntype EmptyCell = { kind: 'empty' };\ntype ShapeCell = {\n  kind: 'shape'\n  shapeIdx: number\n}\nexport type GridCell = EmptyCell | ShapeCell;\n\nexport type LevelInfo = {\n  number: number\n  gravity: number\n  multiplier: number\n};\n\nexport type State = {\n  width: number\n  height: number\n  nextShapeIdx: number\n  activeShape: ActiveShape\n\n  dasDirection: input.DirectionValue\n  dasDelay: number\n\n  entryDelay: number\n  gravity: number\n  board: GridCell[][]\n\n  score: number\n  lines: number\n};\n\nexport class Integrator {\n  rand: randomizer.Randomizer\n  levelTable: LevelInfo[]\n\n  constructor(rand: randomizer.Randomizer, levelTable: LevelInfo[]) {\n    this.rand = rand;\n    this.levelTable = levelTable;\n  }\n\n  newState(): State {\n    return {\n      width: 12,\n      height: 24,\n      nextShapeIdx: this.rand.nextShape(),\n      activeShape: {\n        shapeIdx: this.rand.nextShape(),\n        dRow: 0,\n        dCol: 6,\n        rotation: 0,\n      },\n      dasDirection: 'NONE',\n      dasDelay: 0,\n      entryDelay: ENTRY_DELAY,\n      gravity: this.levelTable[0].gravity,\n      board: makeGrid(12, 24),\n      score: 0,\n      lines: 0,\n    };\n  }\n\n  apply(s: State, a: Action): State {\n    switch (a.kind) {\n      case 'tick':\n        return this.doTick(s);\n      case 'input':\n        return this.doInput(s, a);\n    }\n  }\n\n  getLevelInfo(s: State): LevelInfo {\n    const l = Math.floor(s.lines / LINES_PER_LEVEL);\n    return this.levelTable[\n      l < this.levelTable.length ? l : this.levelTable.length - 1];\n  }\n\n  private doEntry(s: State): boolean {\n    if (0 < s.entryDelay) {\n      s.entryDelay--;\n      return false;\n    }\n    return true;\n  }\n\n  private doDAS(s: State) {\n    if (s.dasDirection === 'NONE') {\n      return;\n    }\n    if (s.dasDelay === 0) {\n      s.dasDelay = DAS_REFRESH_DELAY;\n      attemptTranslateDirection(s, s.dasDirection);\n    } else {\n      s.dasDelay--;\n    }\n  }\n\n  private doGravity(s: State): boolean {\n    if (s.gravity !== 0) {\n      s.gravity--;\n      return true;\n    }\n\n    s.gravity = this.getLevelInfo(s).gravity;\n    return attemptMoveActive(s, 1, 0, 0);\n  }\n\n  private doTick(s: State) {\n    return produce(s, (s: State) => {\n      this.doDAS(s);\n      if (!this.doEntry(s)) {\n        return;\n      }\n      if (!this.doGravity(s)) {\n        this.doLockDown(s);\n      }\n    });\n  }\n\n  private doInput(s: State, a: Input): State {\n    return produce(s, s => {\n      switch (a.input.direction) {\n        case 'NONE':\n          s.dasDirection = 'NONE';\n          break;\n        case 'LEFT':\n        case 'RIGHT':\n        case 'DOWN':\n          if (s.dasDirection === 'NONE') {\n            s.dasDelay = DAS_INITIAL_DELAY;\n            attemptTranslateDirection(s, a.input.direction);\n          }\n          s.dasDirection = a.input.direction;\n          break;\n      }\n      switch (a.input.action) {\n        case 'NONE':\n          break;\n        case 'SPIN':\n          attemptTranslateDirection(s, a.input.action);\n          break;\n        case 'DROP':\n          this.doDrop(s);\n          break;\n      }\n    });\n  }\n\n  private doDrop(s: State) {\n    while (attemptMoveActive(s, 1, 0, 0)) { }\n    this.doLockDown(s);\n  }\n\n  private doLockDown(s: State) {\n    s.board = flattenBoard(s);\n    s.entryDelay = ENTRY_DELAY;\n    s.activeShape = {\n      shapeIdx: s.nextShapeIdx,\n      dRow: 0,\n      dCol: s.width / 2,\n      rotation: 0,\n    };\n    s.nextShapeIdx = this.rand.nextShape();\n\n    const fullRows: number[] = [];\n    for (let row = 0; row < s.height; row++) {\n      let allFull = (() => {\n        for (let col = 0; col < s.width; col++) {\n          if (s.board[row][col].kind === 'empty') {\n            return false;\n          }\n        }\n        return true;\n      })();\n\n      if (allFull) {\n        fullRows.push(row);\n      }\n    }\n\n    const newBoard = makeGrid(s.width, s.height);\n    let src = s.height - 1;\n    let dest = s.height - 1;\n    while (src >= 0) {\n      if (fullRows.includes(src)) {\n        src--;\n        continue;\n      }\n\n      for (let col = 0; col < s.width; col++) {\n        newBoard[dest][col] = s.board[src][col];\n      }\n      src--;\n      dest--;\n    }\n    s.board = newBoard;\n    s.score += (this.getLevelInfo(s).multiplier *\n      (Math.pow(2, fullRows.length) - 1));\n    s.lines += fullRows.length;\n  }\n}\n\nfunction makeGrid(width: number, height: number): GridCell[][] {\n  const board: GridCell[][] = [];\n  for (let i = 0; i < height; i++) {\n    board.push(Array(width).fill({ kind: 'empty' }));\n  }\n  return board;\n}\n\nexport function getShape(s: ActiveShape): shape.Shape {\n  let res = SHAPES[s.shapeIdx];\n  for (let i = 0; i < s.rotation; i++) {\n    res = (res.map(([row, col]) => [col, -row]) as shape.Shape);\n  }\n  res = (res.map(([row, col]) => [row + s.dRow, col + s.dCol]) as shape.Shape);\n  return res.filter(([row, _]) => row >= 0);\n}\n\nexport function flattenBoard(s: State): GridCell[][] {\n  const res = s.board.map(row => row.slice());\n\n  const shape = getShape(s.activeShape);\n\n  for (const [row, col] of shape) {\n    res[row][col] = {\r\n      kind: 'shape',\n      shapeIdx: s.activeShape.shapeIdx,\n    }\n  }\n\n  return res;\n}\n\nfunction activeShapeClips(s: State, a: ActiveShape): boolean {\n  const shp = getShape(a);\n\n  for (let [row, col] of shp) {\n    const clips = (function() {\n      if (s.height <= row || col < 0 || s.width <= col) {\n        return true;\n      }\n      if (row < 0) {\n        return false;\n      }\n      return s.board[row][col].kind !== 'empty';\n    })();\n\n    if (clips) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptMoveActive(s: State, dRow: number, dCol: number, dRot: number): boolean {\n  const newActive: ActiveShape = {\n    shapeIdx: s.activeShape.shapeIdx,\n    dRow: s.activeShape.dRow + dRow,\n    dCol: s.activeShape.dCol + dCol,\n    rotation: (s.activeShape.rotation + dRot) % 4 as 0 | 1 | 2 | 3,\n  }\n\n  if (activeShapeClips(s, newActive)) {\n    return false;\n  }\n\n  s.activeShape = newActive;\n  return true;\n}\n\nfunction attemptTranslateDirection(s: State, d: input.DirectionButton | 'SPIN'): boolean {\n  switch (d) {\n    case 'LEFT':\n      return attemptMoveActive(s, 0, -1, 0);\n    case 'DOWN':\n      return attemptMoveActive(s, 1, 0, 0);\n    case 'RIGHT':\n      return attemptMoveActive(s, 0, 1, 0);\n    case 'SPIN':\n      return attemptMoveActive(s, 0, 0, 1);\n  }\n}\n","import * as React from 'react';\nimport './App.css';\nimport Board from './Board';\nimport PiecePreview from './PiecePreview';\nimport * as state from './state';\n\nexport type Properties = {\n  state: state.State\n  integ: state.Integrator\n}\n\nfunction App(p: Properties): JSX.Element {\n  const s = p.state;\n  return (<div className= \"App\">\n    <main>\n      <Board cells={ state.flattenBoard(s) } />\n    </main>\n    <aside>\n      <h1>Pentris</h1>\n      <p className=\"copy\">\n        It's Alpha. It's Delicious. It's Pentris.\n      </p>\n      <h2>Preview</h2>\n      <PiecePreview shapeIdx={p.state.nextShapeIdx}/>\n      <h3>Score</h3>\n      <h3>Lines Cleared</h3>\n      <p className=\"score\">{s.score}</p>\n      <p className=\"score\">{s.lines}</p>\n      <h3>Level</h3>\n      <h3>Speed</h3>\n      <p className=\"score\">{p.integ.getLevelInfo(s).number}</p>\n      <p className=\"score\">{p.integ.getLevelInfo(s).multiplier}</p>\n    </aside>\n  </div>);\n}\n\nexport default App;\n","\nimport Prando from 'prando';\n\nimport SHAPES from './shapes';\n\nexport interface Randomizer {\n  nextShape(): number\n}\n\nexport class TrueRandomizer implements Randomizer {\n  rand: Prando\n\n  constructor(rand: Prando) {\n    this.rand = rand;\n  }\n\n  nextShape(): number {\n    return this.rand.nextInt(0, SHAPES.length - 1);\n  }\n}\n\nexport class NBagRandomizer implements Randomizer {\n  rand: Prando\n  n: number\n  bag: number[]\n\n  constructor(rand: Prando, n: number) {\n    this.rand = rand;\n    this.n = n;\n    this.bag = [];\n  }\n\n  nextShape(): number {\n    if (this.bag.length === 0) {\n      this.bag = Array.from({ length: this.n * SHAPES.length },\n        (_, k) => k % SHAPES.length\n      )\n      shuffle(this.bag, this.rand);\n    }\n    return this.bag.pop() as number;\n  }\n}\n\nfunction shuffle<T>(array: T[], rand: Prando) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(rand.next() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\nimport App from './App';\nimport * as state from './state';\nimport * as randomizer from './randomizer';\nimport * as input from './input';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport Prando from 'prando';\n\nconst manualActions = new rx.Subject<state.Action>();\nconst ticks = rx.timer(0, 1000 / 60).pipe(\n  rxop.map(_ => ({ kind: 'tick' } as state.Action))\n)\n\nconst keyDowns =\n  rx.fromEvent(document, \"keydown\") as rx.Observable<KeyboardEvent>;\nconst keyUps =\n  rx.fromEvent(document, \"keyup\") as rx.Observable<KeyboardEvent>;\n\nfunction keyToInput(key: string): input.Button | null {\n  switch (key) {\n    case 'ArrowLeft':\n      return 'LEFT';\n    case 'ArrowRight':\n      return 'RIGHT';\n    case 'ArrowDown':\n      return 'DOWN';\n    case 'ArrowUp':\n      return 'SPIN';\n    case ' ':\n      return 'DROP';\n    default:\n      return null;\n  }\n}\n\nfunction levelToGravity(l: number): number {\n  return Math.floor(48 * Math.pow(0.9, l));\n}\n\nfunction gravityToLevel(g: number): number {\n  // Math.abs fixes a weird issue involving -0.\n  return Math.abs(Math.floor(Math.log(g / 48) / Math.log(0.9)));\n}\n\nconst rawInputs: rx.Observable<input.RawInput> = rx.merge(keyUps, keyDowns).pipe(\n  rxop.map(e => ({ button: keyToInput(e.key), pressed: e.type === 'keydown' } as input.RawInput)),\n  rxop.filter(i => i.button != null),\n)\n\nconst inputActions = input.parseInput(rawInputs).pipe(\n  rxop.map(input => ({ kind: 'input', input } as state.Action)),\n);\n\nconst actions = rx.merge(manualActions, inputActions, ticks);\n\nconst levelTable = Array.from({ length: 37 }, (_, idx): state.LevelInfo => ({\n  number: idx + 1,\n  gravity: levelToGravity(idx),\n  multiplier: gravityToLevel(levelToGravity(idx)) + 1\n}));\nconsole.log(levelTable);\n\nconst integ = new state.Integrator(\n  new randomizer.NBagRandomizer(new Prando(), 2),\n  levelTable);\nconst initial = integ.newState();\n\nconst states = actions.pipe(\n  rxop.scan<state.Action, state.State>((s, a) => integ.apply(s, a), initial),\n  rxop.startWith(initial));\n\nconst doms = states.pipe(rxop.map(s =>\n  <App key=\"app\" state = { s } integ = { integ } />));\n\nconst root = document.getElementById('root') as HTMLElement;\n\ndoms.subscribe((d) => ReactDOM.render(d, root));\n\nregisterServiceWorker();\n","\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\n\nexport type DirectionButton = 'LEFT' | 'RIGHT' | 'DOWN'\nexport type DirectionValue = 'NONE' | DirectionButton\nexport type ActionButton = 'SPIN' | 'DROP'\nexport type ActionValue = 'NONE' | ActionButton\nexport type Button = DirectionButton | ActionButton\nexport type RawInput = {\n  button: Button\n  pressed: boolean\n}\n\nexport type ControllerInput = {\n  direction: DirectionValue\n  action: ActionValue\n}\n\nexport function parseInput(raw: rx.Observable<RawInput>):\n  rx.Observable<ControllerInput> {\n  // Filter out the OS's key repetitions. There's a \"repeated\" boolean on\n  // the event, but it doesn't have universal support so we figure it out.\n  const deduped: rx.Observable<RawInput> = raw.pipe(\n    rxop.groupBy(i => i.button),\n    rxop.map(group => group.pipe(rxop.distinctUntilKeyChanged('pressed'))),\n    rxop.mergeAll(),\n  );\n\n  const [dir, action] =\n    rxop.partition<RawInput>(i =>\n      i.button === 'LEFT'\n      || i.button === 'RIGHT'\n      || i.button === 'DOWN')(deduped);\n\n  const currentDir: rx.Observable<DirectionValue> = dir.pipe(\n    rxop.scan<RawInput, DirectionValue>((acc, val) => {\n      const newButton = val.button as DirectionButton;\n      if (val.pressed) {\n        // Newly pressed buttons override.\n        return newButton;\n      } else if (acc === val.button) {\n        // If we released the last key we pressed, change to 'NONE'.\n        return 'NONE';\n      } else {\n        // Otherwise, ignore.\n        return acc;\n      }\n    }, 'NONE'),\n    rxop.startWith('NONE'),\n  );\n\n  const currentAction: rx.Observable<ActionValue> = action.pipe(\n    rxop.filter(i => i.pressed),\n    rxop.map(i => i.button as ActionButton),\n  );\n\n  const currentDirInputs: rx.Observable<ControllerInput> = currentDir.pipe(\n    rxop.map(direction => ({ direction, action: 'NONE' })),\n  );\n\n  const currentActionInputs: rx.Observable<ControllerInput> = currentAction.pipe(\n    rxop.withLatestFrom(currentDir),\n    rxop.map(([action, direction]) => ({ direction, action })),\n  );\n\n  return rx.merge(currentDirInputs, currentActionInputs);\n}\n"],"sourceRoot":""}