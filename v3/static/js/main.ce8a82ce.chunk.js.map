{"version":3,"sources":["Board.tsx","shape.ts","shapes.ts","PiecePreview.tsx","state.ts","App.tsx","registerServiceWorker.ts","index.tsx","input.ts"],"names":["cellClassName","c","kind","concat","shapeIdx","Board","state","react","className","cells","map","row","rowIdx","key","cell","cellIdx","mirrored","s","_ref","_ref2","Object","slicedToArray","bbox","rows","_ref5","_ref6","cols","_ref7","_ref8","Math","min","apply","toConsumableArray","max","pentominoF","pentominoL","pentominoN","pentominoP","pentominoY","pentominoZ","PENTOMINOES","shape","tetrominoJ","tetrominoL","tetrominoS","tetrominoZ","SHAPES","_center","_bbox","_bbox2","minRow","minCol","maxRow","maxCol","floor","center","_center2","cRow","cCol","_ref9","_ref10","col","PiecePreview","_shape$justified","_bbox3","_bbox4","_ref11","_ref12","_shape$justified2","justified","grid","Array","from","length","fill","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","_ref4","value","_ref3","err","return","src_Board","DAS_INITIAL_DELAY","DAS_REFRESH_DELAY","ENTRY_DELAY","GRAVITY","makeGrid","width","height","board","i","push","getShape","res","rotation","dRow","dCol","filter","flattenBoard","slice","activeShape","newActiveShapeIdx","rand","nextInt","attemptMoveActive","dRot","newActive","a","shp","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","v","_iterator2","_ret","activeShapeClips","attemptTranslateDirection","d","doTick","produce","entryDelay","doEntry","dasDirection","dasDelay","doDAS","gravity","nextShapeIdx","doGravity","fullRows","_loop2","newBoard","src","dest","includes","score","pow","doClears","doInput","input","direction","action","doDrop","App","p","src_PiecePreview","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","manualActions","rx","ticks","pipe","rxop","_","keyDowns","document","keyUps","keyToInput","inputActions","raw","deduped","button","group","_rxop$partition","_rxop$partition2","dir","currentDir","acc","val","newButton","pressed","currentAction","currentDirInputs","currentActionInputs","e","type","actions","Prando","initial","doms","src_App","root","getElementById","subscribe","ReactDOM","URL","process","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ce8a82ce.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport './Board.css';\nimport * as state from './state';\n\nexport type State = {\n  cells : state.GridCell[][],\n};\n\nfunction cellClassName(c:state.GridCell):string {\n  switch (c.kind) {\n    case 'empty': return 'cell empty';\n    case 'shape': return `cell color-${c.shapeIdx}`\n  }\n}\n\nfunction Board(state : State): JSX.Element {\n  return (\n    <div className=\"Board\">\n      {state.cells.map(\n        (row, rowIdx) => <div className=\"row\" key={rowIdx}>\n          {\n            row.map((cell, cellIdx) =>\n              <div className={cellClassName(cell)} key={cellIdx}/>\n            )\n          }\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Board;\n","\nexport type Shape = Array<[number, number]>;\n\nexport function mirrored(s: Shape): Shape {\n  return s.map(([row, col]) => [row, -col]);\n}\n\nexport function transpose(s: Shape): Shape {\n  return s.map(([row, col]) => [col, row]);\n}\n\nexport function bbox(s: Shape): [number, number, number, number] {\n  const rows = s.map(([row, _]) => row);\n  const cols = s.map(([_, col]) => col);\n  return [Math.min(...rows), Math.min(...cols),\n  Math.max(...rows), Math.max(...cols)];\n}\n\nexport function center(s: Shape): [number, number] {\n  const [minRow, minCol, maxRow, maxCol] = bbox(s);\n  return [Math.floor((minRow + maxRow) / 2), Math.floor((minCol + maxCol) / 2)]\n}\n\nexport function centered(s: Shape): Shape {\n  const [cRow, cCol] = center(s);\n  return s.map(([row, col]) => [row - cRow, col - cCol]);\n}\n\nexport function justified(s: Shape): [Shape, number, number] {\n  const [minRow, minCol, maxRow, maxCol] = bbox(s);\n  return [\n    s.map(([row, col]) => [row - minRow, col - minCol]),\n    maxRow - minRow + 1,\n    maxCol - minCol + 1,\n  ];\n}\n","\nimport * as shape from './shape';\n\n// Pentominos.\n\nconst pentominoF: shape.Shape = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 1],\n];\n\nconst pentominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [0, 4],\n];\n\nconst pentominoL: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [1, 3],\n];\n\nconst pentominoN: shape.Shape = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst pentominoP: shape.Shape = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [1, 1],\n  [1, -1],\n];\n\nconst pentominoT: shape.Shape = [\n  [0, -1],\n  [0, 1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoU: shape.Shape = [\n  [0, 0],\n  [0, -1],\n  [0, 1],\n  [-1, 1],\n  [-1, -1],\n];\n\nconst pentominoV: shape.Shape = [\n  [0, -2],\n  [0, -1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoW: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n  [1, 2],\n  [2, 2],\n];\n\nconst pentominoX: shape.Shape = [\n  [0, 0],\n  [-1, 0],\n  [1, 0],\n  [0, -1],\n  [0, 1],\n];\n\nconst pentominoY: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [-1, 1],\n];\n\nconst pentominoZ: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 0],\n  [1, 2],\n];\n\nconst pentominoF2: shape.Shape = shape.mirrored(pentominoF);\n\nconst pentominoJ: shape.Shape = shape.mirrored(pentominoL);\n\nconst pentominoN2: shape.Shape = shape.mirrored(pentominoN);\n\nconst pentominoQ: shape.Shape = shape.mirrored(pentominoP);\n\nconst pentominoY2: shape.Shape = shape.mirrored(pentominoY);\n\nconst pentominoS: shape.Shape = shape.mirrored(pentominoZ);\n\nconst PENTOMINOES: shape.Shape[] = [\n  pentominoF,\n  pentominoI,\n  pentominoN,\n  pentominoP,\n  pentominoT,\n  pentominoU,\n  pentominoV,\n  pentominoW,\n  pentominoX,\n  pentominoY,\n  pentominoZ,\n  pentominoF2,\n  pentominoJ,\n  pentominoN2,\n  pentominoQ,\n  pentominoY2,\n  pentominoS,\n  pentominoL,\n];\n\n// Tetrominos\n\nconst tetrominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst tetrominoJ: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 2],\n];\n\nconst tetrominoL: shape.Shape = shape.mirrored(tetrominoJ);\n\nconst tetrominoO: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n];\n\nconst tetrominoS: shape.Shape = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n];\n\nconst tetrominoZ: shape.Shape = shape.mirrored(tetrominoS);\n\nconst tetrominoT: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 1],\n];\n\nconst TETROMINOES: shape.Shape[] = [\n  tetrominoI,\n  tetrominoJ,\n  tetrominoL,\n  tetrominoO,\n  tetrominoS,\n  tetrominoZ,\n  tetrominoT,\n];\n\n// Trominoes\n\nconst trominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n];\n\nconst trominoL: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n];\n\nconst TROMINOES: shape.Shape[] = [\n  trominoI,\n  trominoL,\n];\n\nconst domino: shape.Shape = [\n  [0, 0],\n  [0, 1],\n];\n\nconst monomino: shape.Shape = [\n  [0, 0]\n];\n\nconst SHAPES: shape.Shape[] = [\n  monomino,\n  domino,\n  ...TROMINOES,\n  ...TETROMINOES,\n  ...PENTOMINOES\n].map(shape.centered);\n\nexport default SHAPES;\n","import * as React from 'react';\n\nimport * as state from './state';\nimport * as shape from './shape';\nimport SHAPES from './shapes';\nimport Board from './Board';\n\nexport type Properties = {\n  shapeIdx: number,\n};\n\nfunction PiecePreview({ shapeIdx }: Properties): JSX.Element {\n  const [justified, rows, cols] = shape.justified(SHAPES[shapeIdx]);\n  const grid = Array.from({ length: rows },\n    () => Array(cols).fill({ kind: 'empty' } as state.GridCell));\n\n  for (const [row, col] of justified) {\n    grid[row][col] = { kind: 'shape', shapeIdx };\n  }\n  return <Board cells={ grid } />;\n}\n\nexport default PiecePreview;\n","\nimport produce from 'immer';\nimport * as shape from './shape';\nimport SHAPES from './shapes';\nimport * as input from './input';\nimport Prando from 'prando';\n\nconst DAS_INITIAL_DELAY = 16;\nconst DAS_REFRESH_DELAY = 6;\nconst ENTRY_DELAY = 18;\nconst GRAVITY = 60 / 3;\n\nexport type Action = Tick | Input;\n\ntype Tick = { kind: 'tick' };\ntype Input = {\n  kind: 'input'\n  input: input.ControllerInput\n}\n\ntype ActiveShape = {\n  shapeIdx: number\n  dRow: number\n  dCol: number\n  rotation: 0 | 1 | 2 | 3\n}\ntype EmptyCell = { kind: 'empty' };\ntype ShapeCell = {\n  kind: 'shape'\n  shapeIdx: number\n}\nexport type GridCell = EmptyCell | ShapeCell;\n\nexport type State = {\n  width: number\n  height: number\n  nextShapeIdx: number\n  activeShape: ActiveShape\n\n  dasDirection: input.DirectionValue\n  dasDelay: number\n\n  entryDelay: number\n  gravity: number\n  board: GridCell[][]\n\n  score: number\n};\n\nexport function newState(rand: Prando): State {\n  return {\n    width: 12,\n    height: 24,\n    nextShapeIdx: newActiveShapeIdx(rand),\n    activeShape: {\n      shapeIdx: newActiveShapeIdx(rand),\n      dRow: 0,\n      dCol: 6,\n      rotation: 0,\n    },\n    dasDirection: 'NONE',\n    dasDelay: 0,\n    entryDelay: ENTRY_DELAY,\n    gravity: GRAVITY,\n    board: makeGrid(12, 24),\n    score: 0,\n  };\n}\n\nfunction makeGrid(width: number, height: number): GridCell[][] {\n  const board: GridCell[][] = [];\n  for (let i = 0; i < height; i++) {\n    board.push(Array(width).fill({ kind: 'empty' }));\n  }\n  return board;\n}\n\nexport function getShape(s: ActiveShape): shape.Shape {\n  let res = SHAPES[s.shapeIdx];\n  for (let i = 0; i < s.rotation; i++) {\n    res = (res.map(([row, col]) => [col, -row]) as shape.Shape);\n  }\n  res = (res.map(([row, col]) => [row + s.dRow, col + s.dCol]) as shape.Shape);\n  return res.filter(([row, _]) => row >= 0);\n}\n\nexport function flattenBoard(s: State): GridCell[][] {\n  const res = s.board.map(row => row.slice());\n\n  const shape = getShape(s.activeShape);\n\n  for (const [row, col] of shape) {\n    res[row][col] = {\r\n      kind: 'shape',\n      shapeIdx: s.activeShape.shapeIdx,\n    }\n  }\n\n  return res;\n}\n\nfunction newActiveShapeIdx(rand: Prando): number {\n  return rand.nextInt(0, SHAPES.length - 1);\n}\n\nfunction activeShapeClips(s: State, a: ActiveShape): boolean {\n  const shp = getShape(a);\n\n  for (let [row, col] of shp) {\n    const clips = (function() {\n      if (s.height <= row || col < 0 || s.width <= col) {\n        return true;\n      }\n      if (row < 0) {\n        return false;\n      }\n      return s.board[row][col].kind !== 'empty';\n    })();\n\n    if (clips) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptMoveActive(s: State, dRow: number, dCol: number, dRot: number): boolean {\n  const newActive: ActiveShape = {\n    shapeIdx: s.activeShape.shapeIdx,\n    dRow: s.activeShape.dRow + dRow,\n    dCol: s.activeShape.dCol + dCol,\n    rotation: (s.activeShape.rotation + dRot) % 4 as 0 | 1 | 2 | 3,\n  }\n\n  if (activeShapeClips(s, newActive)) {\n    return false;\n  }\n\n  s.activeShape = newActive;\n  return true;\n}\n\nfunction attemptTranslateDirection(s: State, d: input.DirectionButton | 'SPIN'): boolean {\n  switch (d) {\n    case 'LEFT':\n      return attemptMoveActive(s, 0, -1, 0);\n    case 'DOWN':\n      return attemptMoveActive(s, 1, 0, 0);\n    case 'RIGHT':\n      return attemptMoveActive(s, 0, 1, 0);\n    case 'SPIN':\n      return attemptMoveActive(s, 0, 0, 1);\n  }\n}\n\nfunction doEntry(s: State): boolean {\n  if (0 < s.entryDelay) {\n    s.entryDelay--;\n    return false;\n  }\n  return true;\n}\n\nfunction doDAS(s: State) {\n  if (s.dasDirection === 'NONE') {\n    return;\n  }\n  if (s.dasDelay === 0) {\n    s.dasDelay = DAS_REFRESH_DELAY;\n    attemptTranslateDirection(s, s.dasDirection);\n  } else {\n    s.dasDelay--;\n  }\n}\n\nfunction doGravity(rand: Prando, s: State) {\n  if (s.gravity !== 0) {\n    s.gravity--;\n    return;\n  }\n\n  s.gravity = GRAVITY;\n  if (attemptMoveActive(s, 1, 0, 0)) {\n    return;\n  }\n\n  s.board = flattenBoard(s);\n  s.entryDelay = ENTRY_DELAY;\n  s.activeShape = {\n    shapeIdx: s.nextShapeIdx,\n    dRow: 0,\n    dCol: s.width / 2,\n    rotation: 0,\n  };\n  s.nextShapeIdx = newActiveShapeIdx(rand);\n}\n\nfunction doClears(s: State) {\n  const fullRows: number[] = [];\n  for (let row = 0; row < s.height; row++) {\n    let allFull = (() => {\n      for (let col = 0; col < s.width; col++) {\n        if (s.board[row][col].kind === 'empty') {\n          return false;\n        }\n      }\n      return true;\n    })();\n\n    if (allFull) {\n      fullRows.push(row);\n    }\n  }\n\n  const newBoard = makeGrid(s.width, s.height);\n  let src = s.height - 1;\n  let dest = s.height - 1;\n  while (src >= 0) {\n    if (fullRows.includes(src)) {\n      src--;\n      continue;\n    }\n\n    for (let col = 0; col < s.width; col++) {\n      newBoard[dest][col] = s.board[src][col];\n    }\n    src--;\n    dest--;\n  }\n  s.board = newBoard;\n  s.score += Math.pow(2, fullRows.length) - 1;\n}\n\nfunction doTick(rand: Prando, s: State) {\n  return produce(s, (s: State) => {\n    if (!doEntry(s)) {\n      return;\n    }\n    doDAS(s);\n    doGravity(rand, s);\n    doClears(s);\n  });\n}\n\nfunction doInput(s: State, a: Input): State {\n  return produce(s, s => {\n    switch (a.input.direction) {\n      case 'NONE':\n        s.dasDirection = 'NONE';\n        break;\n      case 'LEFT':\n      case 'RIGHT':\n      case 'DOWN':\n        if (s.dasDirection === 'NONE') {\n          s.dasDelay = DAS_INITIAL_DELAY;\n          attemptTranslateDirection(s, a.input.direction);\n        }\n        s.dasDirection = a.input.direction;\n        break;\n    }\n    switch (a.input.action) {\n      case 'NONE':\n        break;\n      case 'SPIN':\n        attemptTranslateDirection(s, a.input.action);\n        break;\n      case 'DROP':\n        doDrop(s);\n        break;\n    }\n  });\n}\n\nfunction doDrop(s: State) {\n  while (attemptMoveActive(s, 1, 0, 0)) { }\n}\n\nexport function apply(rand: Prando, s: State, a: Action): State {\n  switch (a.kind) {\n    case 'tick':\n      return doTick(rand, s);\n    case 'input':\n      return doInput(s, a);\n  }\n}\n","import * as React from 'react';\nimport './App.css';\nimport Board from './Board';\nimport PiecePreview from './PiecePreview';\nimport * as state from './state';\n\nexport type Properties = {\n  state: state.State\n}\n\nfunction App(p: Properties): JSX.Element {\n  const s = p.state;\n  return (<div className= \"App\">\n    <Board cells={ state.flattenBoard(s) } />\n    <aside>\n      <h1>Pentris</h1>\n      <p>\n        It's Delicious. It's Pentris.\n      </p>\n      <h2>Preview</h2>\n      <PiecePreview shapeIdx={p.state.nextShapeIdx}/>\n      <h2>Score</h2>\n      <p>{s.score}</p>\n    </aside>\n  </div>);\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\nimport App from './App';\nimport * as state from './state';\nimport * as input from './input';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport Prando from 'prando';\nimport SHAPES from './shapes';\n\nconst manualActions = new rx.Subject<state.Action>();\nconst ticks = rx.timer(0, 1000 / 60).pipe(\n  rxop.map(_ => ({ kind: 'tick' } as state.Action))\n)\n\nconst keyDowns =\n  rx.fromEvent(document, \"keydown\") as rx.Observable<KeyboardEvent>;\nconst keyUps =\n  rx.fromEvent(document, \"keyup\") as rx.Observable<KeyboardEvent>;\n\nfunction keyToInput(key: string): input.Button | null {\n  switch (key) {\n    case 'ArrowLeft':\n      return 'LEFT';\n    case 'ArrowRight':\n      return 'RIGHT';\n    case 'ArrowDown':\n      return 'DOWN';\n    case 'ArrowUp':\n      return 'SPIN';\n    case ' ':\n      return 'DROP';\n    default:\n      return null;\n  }\n}\n\nconst rawInputs: rx.Observable<input.RawInput> = rx.merge(keyUps, keyDowns).pipe(\n  rxop.map(e => ({ button: keyToInput(e.key), pressed: e.type === 'keydown' } as input.RawInput)),\n  rxop.filter(i => i.button != null),\n)\n\nconst inputActions = input.parseInput(rawInputs).pipe(\n  rxop.map(input => ({ kind: 'input', input } as state.Action)),\n);\n\nconst actions = rx.merge(manualActions, inputActions, ticks);\n\nconst rand = new Prando(42);\nconst initial = state.newState(rand);\n\nconst states = actions.pipe(\n  rxop.scan<state.Action, state.State>((s, a) => state.apply(rand, s, a), initial),\n  rxop.startWith(initial));\n\nconst doms = states.pipe(rxop.map(s => <App key=\"app\" state = { s } />));\n\nconst root = document.getElementById('root') as HTMLElement;\n\n//const dom = App(inputs);\n\ndoms.subscribe((d) => ReactDOM.render(d, root));\n\n\n(window as any)['SHAPES'] = SHAPES;\n(window as any)['DISPATCH'] = (a: state.Action) => manualActions.next(a);\nregisterServiceWorker();\n","\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\n\nexport type DirectionButton = 'LEFT' | 'RIGHT' | 'DOWN'\nexport type DirectionValue = 'NONE' | DirectionButton\nexport type ActionButton = 'SPIN' | 'DROP'\nexport type ActionValue = 'NONE' | ActionButton\nexport type Button = DirectionButton | ActionButton\nexport type RawInput = {\n  button: Button\n  pressed: boolean\n}\n\nexport type ControllerInput = {\n  direction: DirectionValue\n  action: ActionValue\n}\n\nexport function parseInput(raw: rx.Observable<RawInput>):\n  rx.Observable<ControllerInput> {\n  // Filter out the OS's key repetitions. There's a \"repeated\" boolean on\n  // the event, but it doesn't have universal support so we figure it out.\n  const deduped: rx.Observable<RawInput> = raw.pipe(\n    rxop.groupBy(i => i.button),\n    rxop.map(group => group.pipe(rxop.distinctUntilKeyChanged('pressed'))),\n    rxop.mergeAll(),\n  );\n\n  const [dir, action] =\n    rxop.partition<RawInput>(i =>\n      i.button === 'LEFT'\n      || i.button === 'RIGHT'\n      || i.button === 'DOWN')(deduped);\n\n  const currentDir: rx.Observable<DirectionValue> = dir.pipe(\n    rxop.scan<RawInput, DirectionValue>((acc, val) => {\n      const newButton = val.button as DirectionButton;\n      if (val.pressed) {\n        // Newly pressed buttons override.\n        return newButton;\n      } else if (acc === val.button) {\n        // If we released the last key we pressed, change to 'NONE'.\n        return 'NONE';\n      } else {\n        // Otherwise, ignore.\n        return acc;\n      }\n    }, 'NONE'),\n    rxop.startWith('NONE'),\n  );\n\n  const currentAction: rx.Observable<ActionValue> = action.pipe(\n    rxop.filter(i => i.pressed),\n    rxop.map(i => i.button as ActionButton),\n  );\n\n  const currentDirInputs: rx.Observable<ControllerInput> = currentDir.pipe(\n    rxop.map(direction => ({ direction, action: 'NONE' })),\n  );\n\n  const currentActionInputs: rx.Observable<ControllerInput> = currentAction.pipe(\n    rxop.withLatestFrom(currentDir),\n    rxop.map(([action, direction]) => ({ direction, action })),\n  );\n\n  return rx.merge(currentDirInputs, currentActionInputs);\n}\n"],"sourceRoot":""}