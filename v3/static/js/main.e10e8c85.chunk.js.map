{"version":3,"sources":["Board.tsx","shape.ts","shapes.ts","game.ts","PiecePreview.tsx","App.tsx","randomizer.ts","ui.ts","registerServiceWorker.ts","index.tsx","input.ts"],"names":["cellClassName","c","kind","concat","shapeIdx","Board","state","react","className","cells","map","row","rowIdx","key","cell","cellIdx","mirrored","s","_ref","_ref2","Object","slicedToArray","bbox","rows","_ref5","_ref6","cols","_ref7","_ref8","Math","min","apply","toConsumableArray","max","pentominoF","pentominoL","pentominoN","pentominoP","pentominoY","pentominoZ","PENTOMINOES","shape","tetrominoJ","tetrominoL","tetrominoS","tetrominoZ","shapes","_center","_bbox","_bbox2","minRow","minCol","maxRow","maxCol","floor","center","_center2","cRow","cCol","_ref9","_ref10","col","View","levelTable","classCallCheck","this","createClass","value","l","lines","length","Controller","rand","view","width","height","nextShapeIdx","nextShape","activeShape","dRow","dCol","rotation","dasDirection","dasDelay","entryDelay","gravity","startingLevel","board","makeGrid","score","toppedOut","_this","produce","doDAS","doEntry","doGravity","doLockDown","_input","input","_x","_x2","arguments","toString","i","_this2","direction","attemptTranslateDirection","action","doDrop","getLevelInfo","attemptMoveActive","flattenBoard","fullRows","_loop","push","newBoard","src","dest","includes","multiplier","pow","activeShapeClips","Array","fill","getShape","res","_ref3","_ref4","filter","slice","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","a","shp","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","_ref11","v","_iterator2","_ret","dRot","newActive","d","PiecePreview","_shape$justified","_bbox3","_bbox4","_ref12","SHAPES","_shape$justified2","justified","grid","from","src_Board","App","dispatch","autoFocus","onClick","game","src_PiecePreview","number","hidden","NBagRandomizer","n","bag","_","k","array","j","shuffle","pop","gameView","gameController","newState","tick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","manualActions","rx","ticks","pipe","rxop","keyDowns","document","keyUps","keyToInput","levelToGravity","inputActions","raw","deduped","button","group","_rxop$partition","_rxop$partition2","dir","currentDir","acc","val","newButton","pressed","currentAction","currentDirInputs","currentActionInputs","e","type","allActions","idx","g","abs","randomizer","Prando","uiController","ui","initial","initialState","doms","start","src_App","root","getElementById","subscribe","ReactDOM","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e10e8c85.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport * as game from './game';\n\nimport './Board.css';\n\nexport type State = {\n  cells : game.GridCell[][],\n};\n\nfunction cellClassName(c: game.GridCell): string {\n  switch (c.kind) {\n    case 'empty': return 'cell empty';\n    case 'shape': return `cell color-${c.shapeIdx}`\n  }\n}\n\nfunction Board(state : State): JSX.Element {\n  return (\n    <div className=\"Board\">\n      {state.cells.map(\n        (row, rowIdx) => <div className=\"row\" key={rowIdx}>\n          {\n            row.map((cell, cellIdx) =>\n              <div className={cellClassName(cell)} key={cellIdx}/>\n            )\n          }\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Board;\n","\nexport type Shape = Array<[number, number]>;\n\nexport function mirrored(s: Shape): Shape {\n  return s.map(([row, col]) => [row, -col]);\n}\n\nexport function transpose(s: Shape): Shape {\n  return s.map(([row, col]) => [col, row]);\n}\n\nexport function bbox(s: Shape): [number, number, number, number] {\n  const rows = s.map(([row, _]) => row);\n  const cols = s.map(([_, col]) => col);\n  return [Math.min(...rows), Math.min(...cols),\n  Math.max(...rows), Math.max(...cols)];\n}\n\nexport function center(s: Shape): [number, number] {\n  const [minRow, minCol, maxRow, maxCol] = bbox(s);\n  return [Math.floor((minRow + maxRow) / 2), Math.floor((minCol + maxCol) / 2)]\n}\n\nexport function centered(s: Shape): Shape {\n  const [cRow, cCol] = center(s);\n  return s.map(([row, col]) => [row - cRow, col - cCol]);\n}\n\nexport function justified(s: Shape): [Shape, number, number] {\n  const [minRow, minCol, maxRow, maxCol] = bbox(s);\n  return [\n    s.map(([row, col]) => [row - minRow, col - minCol]),\n    maxRow - minRow + 1,\n    maxCol - minCol + 1,\n  ];\n}\n","\nimport * as shape from './shape';\n\n// Pentominos.\n\nconst pentominoF: shape.Shape = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 1],\n];\n\nconst pentominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [0, 4],\n];\n\nconst pentominoL: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [1, 3],\n];\n\nconst pentominoN: shape.Shape = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst pentominoP: shape.Shape = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [1, 1],\n  [1, -1],\n];\n\nconst pentominoT: shape.Shape = [\n  [0, -1],\n  [0, 1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoU: shape.Shape = [\n  [0, 0],\n  [0, -1],\n  [0, 1],\n  [-1, 1],\n  [-1, -1],\n];\n\nconst pentominoV: shape.Shape = [\n  [0, -2],\n  [0, -1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoW: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n  [1, 2],\n  [2, 2],\n];\n\nconst pentominoX: shape.Shape = [\n  [0, 0],\n  [-1, 0],\n  [1, 0],\n  [0, -1],\n  [0, 1],\n];\n\nconst pentominoY: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [-1, 1],\n];\n\nconst pentominoZ: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 0],\n  [1, 2],\n];\n\nconst pentominoF2: shape.Shape = shape.mirrored(pentominoF);\n\nconst pentominoJ: shape.Shape = shape.mirrored(pentominoL);\n\nconst pentominoN2: shape.Shape = shape.mirrored(pentominoN);\n\nconst pentominoQ: shape.Shape = shape.mirrored(pentominoP);\n\nconst pentominoY2: shape.Shape = shape.mirrored(pentominoY);\n\nconst pentominoS: shape.Shape = shape.mirrored(pentominoZ);\n\nconst PENTOMINOES: shape.Shape[] = [\n  pentominoF,\n  pentominoF2,\n  pentominoL,\n  pentominoJ,\n  pentominoN,\n  pentominoN2,\n  pentominoP,\n  pentominoQ,\n  pentominoY,\n  pentominoY2,\n  pentominoZ,\n  pentominoS,\n  pentominoT,\n  pentominoU,\n  pentominoV,\n  pentominoW,\n  pentominoX,\n  pentominoI,\n];\n\n// Tetrominos\n\nconst tetrominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst tetrominoJ: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 2],\n];\n\nconst tetrominoL: shape.Shape = shape.mirrored(tetrominoJ);\n\nconst tetrominoO: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n];\n\nconst tetrominoS: shape.Shape = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n];\n\nconst tetrominoZ: shape.Shape = shape.mirrored(tetrominoS);\n\nconst tetrominoT: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 1],\n];\n\nconst TETROMINOES: shape.Shape[] = [\n  tetrominoI,\n  tetrominoJ,\n  tetrominoL,\n  tetrominoO,\n  tetrominoS,\n  tetrominoZ,\n  tetrominoT,\n];\n\n// Trominoes\n\nconst trominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n];\n\nconst trominoL: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n];\n\nconst TROMINOES: shape.Shape[] = [\n  trominoI,\n  trominoL,\n];\n\nconst domino: shape.Shape = [\n  [0, 0],\n  [0, 1],\n];\n\nconst monomino: shape.Shape = [\n  [0, 0]\n];\n\nconst shapes: shape.Shape[] = [\n  monomino,\n  domino,\n  ...TROMINOES,\n  ...TETROMINOES,\n  ...PENTOMINOES\n].map(shape.centered);\n\nexport default shapes;\n","\nimport produce from 'immer';\n\nimport * as input from './input';\nimport * as randomizer from './randomizer';\nimport * as shape from './shape';\nimport shapes from './shapes';\n\nconst DAS_INITIAL_DELAY = 16;\nconst DAS_REFRESH_DELAY = 6;\nconst ENTRY_DELAY = 18;\nconst LINES_PER_LEVEL = 10;\n\ntype ActiveShape = {\n  shapeIdx: number\n  dRow: number\n  dCol: number\n  rotation: 0 | 1 | 2 | 3\n}\ntype EmptyCell = { kind: 'empty' };\ntype ShapeCell = {\n  kind: 'shape'\n  shapeIdx: number\n}\nexport type GridCell = EmptyCell | ShapeCell;\n\nexport type LevelInfo = {\n  number: number\n  gravity: number\n  multiplier: number\n};\n\nexport type State = {\n  width: number\n  height: number\n  nextShapeIdx: number\n  activeShape: ActiveShape\n\n  dasDirection: input.DirectionValue\n  dasDelay: number\n\n  entryDelay: number\n  gravity: number\n  board: GridCell[][]\n\n  score: number\n  lines: number\n  toppedOut: boolean\n};\n\nexport class View {\n  levelTable: LevelInfo[]\n\n  constructor(levelTable: LevelInfo[]) {\n    this.levelTable = levelTable;\n  }\n\n  startingLevel(): LevelInfo {\n    return this.levelTable[0];\n  }\n\n  getLevelInfo(s: State): LevelInfo {\n    const l = Math.floor(s.lines / LINES_PER_LEVEL);\n    return this.levelTable[\n      l < this.levelTable.length ? l : this.levelTable.length - 1];\n  }\n}\n\nexport class Controller {\n  rand: randomizer.Randomizer\n  view: View\n\n  constructor(rand: randomizer.Randomizer, view: View) {\n    this.rand = rand;\n    this.view = view;\n  }\n\n  newState(): State {\n    return {\n      width: 12,\n      height: 24,\n      nextShapeIdx: this.rand.nextShape(),\n      activeShape: {\n        shapeIdx: this.rand.nextShape(),\n        dRow: 0,\n        dCol: 6,\n        rotation: 0,\n      },\n      dasDirection: 'NONE',\n      dasDelay: 0,\n      entryDelay: ENTRY_DELAY,\n      gravity: this.view.startingLevel().gravity,\n      board: makeGrid(12, 24),\n      score: 0,\n      lines: 0,\n      toppedOut: false,\n    };\n  }\n\n  tick(s: State): State {\n    if (s.toppedOut) { return s; }\n\n    return produce(s, (s: State) => {\n      this.doDAS(s);\n      if (!this.doEntry(s)) {\n        return;\n      }\n      if (!this.doGravity(s)) {\n        this.doLockDown(s);\n      }\n    });\n  }\n\n  input(s: State, i: input.ControllerInput): State {\n    if (s.toppedOut) { return s; }\n\n    return produce(s, s => {\n      switch (i.direction) {\n        case 'NONE':\n          s.dasDirection = 'NONE';\n          break;\n        case 'LEFT':\n        case 'RIGHT':\n        case 'DOWN':\n          if (s.dasDirection === 'NONE') {\n            s.dasDelay = DAS_INITIAL_DELAY;\n            attemptTranslateDirection(s, i.direction);\n          }\n          s.dasDirection = i.direction;\n          break;\n      }\n      switch (i.action) {\n        case 'NONE':\n          break;\n        case 'SPIN':\n          attemptTranslateDirection(s, i.action);\n          break;\n        case 'DROP':\n          this.doDrop(s);\n          break;\n      }\n    });\n  }\n\n  private doEntry(s: State): boolean {\n    if (0 < s.entryDelay) {\n      s.entryDelay--;\n      return false;\n    }\n    return true;\n  }\n\n  private doDAS(s: State) {\n    if (s.dasDirection === 'NONE') {\n      return;\n    }\n    if (s.dasDelay === 0) {\n      s.dasDelay = DAS_REFRESH_DELAY;\n      attemptTranslateDirection(s, s.dasDirection);\n    } else {\n      s.dasDelay--;\n    }\n  }\n\n  private doGravity(s: State): boolean {\n    if (s.gravity !== 0) {\n      s.gravity--;\n      return true;\n    }\n\n    s.gravity = this.view.getLevelInfo(s).gravity;\n    return attemptMoveActive(s, 1, 0, 0);\n  }\n\n\n  private doDrop(s: State) {\n    while (attemptMoveActive(s, 1, 0, 0)) { }\n    this.doLockDown(s);\n  }\n\n  private doLockDown(s: State) {\n    s.board = flattenBoard(s);\n    s.entryDelay = ENTRY_DELAY;\n    s.activeShape = {\n      shapeIdx: s.nextShapeIdx,\n      dRow: 0,\n      dCol: s.width / 2,\n      rotation: 0,\n    };\n    s.nextShapeIdx = this.rand.nextShape();\n\n    const fullRows: number[] = [];\n    for (let row = 0; row < s.height; row++) {\n      let allFull = (() => {\n        for (let col = 0; col < s.width; col++) {\n          if (s.board[row][col].kind === 'empty') {\n            return false;\n          }\n        }\n        return true;\n      })();\n\n      if (allFull) {\n        fullRows.push(row);\n      }\n    }\n\n    const newBoard = makeGrid(s.width, s.height);\n    let src = s.height - 1;\n    let dest = s.height - 1;\n    while (src >= 0) {\n      if (fullRows.includes(src)) {\n        src--;\n        continue;\n      }\n\n      for (let col = 0; col < s.width; col++) {\n        newBoard[dest][col] = s.board[src][col];\n      }\n      src--;\n      dest--;\n    }\n    s.board = newBoard;\n    s.score += (this.view.getLevelInfo(s).multiplier *\n      (Math.pow(2, fullRows.length) - 1));\n    s.lines += fullRows.length;\n    s.toppedOut = activeShapeClips(s, s.activeShape);\n  }\n}\n\nfunction makeGrid(width: number, height: number): GridCell[][] {\n  const board: GridCell[][] = [];\n  for (let i = 0; i < height; i++) {\n    board.push(Array(width).fill({ kind: 'empty' }));\n  }\n  return board;\n}\n\nexport function getShape(s: ActiveShape): shape.Shape {\n  let res = shapes[s.shapeIdx];\n  for (let i = 0; i < s.rotation; i++) {\n    res = (res.map(([row, col]) => [col, -row]) as shape.Shape);\n  }\n  res = (res.map(([row, col]) => [row + s.dRow, col + s.dCol]) as shape.Shape);\n  return res.filter(([row, _]) => row >= 0);\n}\n\nexport function flattenBoard(s: State): GridCell[][] {\n  const res = s.board.map(row => row.slice());\n\n  const shape = getShape(s.activeShape);\n\n  for (const [row, col] of shape) {\n    res[row][col] = {\r\n      kind: 'shape',\n      shapeIdx: s.activeShape.shapeIdx,\n    }\n  }\n\n  return res;\n}\n\nfunction activeShapeClips(s: State, a: ActiveShape): boolean {\n  const shp = getShape(a);\n\n  for (let [row, col] of shp) {\n    const clips = (function() {\n      if (s.height <= row || col < 0 || s.width <= col) {\n        return true;\n      }\n      if (row < 0) {\n        return false;\n      }\n      return s.board[row][col].kind !== 'empty';\n    })();\n\n    if (clips) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptMoveActive(s: State, dRow: number, dCol: number, dRot: number): boolean {\n  const newActive: ActiveShape = {\n    shapeIdx: s.activeShape.shapeIdx,\n    dRow: s.activeShape.dRow + dRow,\n    dCol: s.activeShape.dCol + dCol,\n    rotation: (s.activeShape.rotation + dRot) % 4 as 0 | 1 | 2 | 3,\n  }\n\n  if (activeShapeClips(s, newActive)) {\n    return false;\n  }\n\n  s.activeShape = newActive;\n  return true;\n}\n\nfunction attemptTranslateDirection(s: State, d: input.DirectionButton | 'SPIN'): boolean {\n  switch (d) {\n    case 'LEFT':\n      return attemptMoveActive(s, 0, -1, 0);\n    case 'DOWN':\n      return attemptMoveActive(s, 1, 0, 0);\n    case 'RIGHT':\n      return attemptMoveActive(s, 0, 1, 0);\n    case 'SPIN':\n      return attemptMoveActive(s, 0, 0, 1);\n  }\n}\n","import * as React from 'react';\n\nimport * as game from './game';\nimport * as shape from './shape';\nimport SHAPES from './shapes';\nimport Board from './Board';\n\nexport type Properties = {\n  shapeIdx: number,\n};\n\nfunction PiecePreview({ shapeIdx }: Properties): JSX.Element {\n  const [justified, rows, cols] = shape.justified(SHAPES[shapeIdx]);\n  const grid = Array.from({ length: rows },\n    () => Array(cols).fill({ kind: 'empty' } as game.GridCell));\n\n  for (const [row, col] of justified) {\n    grid[row][col] = { kind: 'shape', shapeIdx };\n  }\n  return (\n    <div className=\"PiecePreview\">\n      <Board cells={ grid } />\n    </div>\n  );\n}\n\nexport default PiecePreview;\n","import * as React from 'react';\n\nimport * as actions from './actions';\nimport Board from './Board';\nimport * as game from './game';\nimport PiecePreview from './PiecePreview';\nimport * as ui from './ui';\n\nimport './App.css';\n\nexport type Properties = {\n  state: ui.State\n  view: game.View\n  dispatch: (a:actions.Action) => void\n}\n\nfunction App({state, view, dispatch}: Properties): JSX.Element {\n  switch (state.kind) {\n  case 'new_game':\n    return (\n      <div className= \"App\">\n        <div className=\"new-game\">\n          <h1>Pentris!</h1>\n          <p>v3alpha: Now with Levels!!</p>\n\n\n          <button className=\"btn btn-primary\" autoFocus onClick={()=> dispatch({kind: 'ui', action: 'START'})}>\n            New Game\n          </button>\n        </div>\n      </div>\n    )\n  case 'in_game':\n    const s = state.game;\n    return (<div className= \"App\">\n      <main>\n        <Board cells={ game.flattenBoard(s) } />\n      </main>\n      <aside>\n        <h1>Pentris</h1>\n        <p className=\"copy\">\n          It's Alpha. It's Delicious. It's Pentris.\n        </p>\n        <h2>Preview</h2>\n        <PiecePreview shapeIdx={s.nextShapeIdx}/>\n        <h3>Score</h3>\n        <h3>Lines Cleared</h3>\n        <p className=\"score\">{s.score}</p>\n        <p className=\"score\">{s.lines}</p>\n        <h3>Level</h3>\n        <h3>Speed</h3>\n        <p className=\"score\">{view.getLevelInfo(s).number}</p>\n        <p className=\"score\">{view.getLevelInfo(s).multiplier}</p>\n      </aside>\n      <div className=\"game-over\" hidden={!s.toppedOut}>\n        <div className=\"card\">\n          <h1>OWNED!</h1>\n          <p>Score: {s.score}</p>\n          <button className=\"btn btn-primary\"\n            onClick={()=> dispatch({kind: 'ui', action: 'START'})}>\n            New Game\n          </button>\n        </div>\n      </div>\n    </div>);\n  }\n}\n\nexport default App;\n","\nimport Prando from 'prando';\n\nimport shapes from './shapes';\n\nexport interface Randomizer {\n  nextShape(): number\n}\n\nexport class TrueRandomizer implements Randomizer {\n  rand: Prando\n\n  constructor(rand: Prando) {\n    this.rand = rand;\n  }\n\n  nextShape(): number {\n    return this.rand.nextInt(0, shapes.length - 1);\n  }\n}\n\nexport class NBagRandomizer implements Randomizer {\n  rand: Prando\n  n: number\n  bag: number[]\n\n  constructor(rand: Prando, n: number) {\n    this.rand = rand;\n    this.n = n;\n    this.bag = [];\n  }\n\n  nextShape(): number {\n    if (this.bag.length === 0) {\n      this.bag = Array.from({ length: this.n * shapes.length },\n        (_, k) => k % shapes.length\n      )\n      shuffle(this.bag, this.rand);\n    }\n    return this.bag.pop() as number;\n  }\n}\n\nfunction shuffle<T>(array: T[], rand: Prando) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(rand.next() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n","\nimport produce from 'immer';\n\nimport * as game from './game';\nimport * as input from './input';\n\ntype NewGameState = {\n  kind: \"new_game\"\n}\n\ntype InGameState = {\n  kind: \"in_game\"\n  game: game.State\n}\n\nexport type State = NewGameState | InGameState;\n\nexport type Action = Tick | Input | UIAction;\n\ntype UIAction = {\n  kind: 'ui'\n  action: 'START'\n}\ntype Tick = { kind: 'tick' };\ntype Input = {\n  kind: 'input'\n  input: input.ControllerInput\n}\n\nexport class Controller {\n  gameView: game.View\n  gameController: game.Controller\n\n  constructor(gameView: game.View, gameController: game.Controller) {\n    this.gameView = gameView;\n    this.gameController = gameController;\n  }\n\n  initialState(): State {\n    return { kind: \"new_game\" };\n  }\n\n  start(_: State): State {\n    return {\n      kind: 'in_game',\n      game: this.gameController.newState(),\n    }\n  }\n\n  tick(s: State): State {\n    return produce(s, (s: State) => {\n      if (s.kind !== 'in_game') { return; }\n      s.game = this.gameController.tick(s.game);\n    });\n  }\n\n  input(s: State, i: input.ControllerInput): State {\n    return produce(s, (s: State) => {\n      if (s.kind !== 'in_game') { return; }\n      s.game = this.gameController.input(s.game, i);\n    });\n  }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Prando from 'prando';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\n\nimport * as actions from './actions';\nimport App from './App';\nimport * as game from './game';\nimport * as input from './input';\nimport * as randomizer from './randomizer';\nimport * as ui from './ui';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport './index.css';\n\nconst manualActions = new rx.Subject<actions.Action>();\nconst ticks = rx.timer(0, 1000 / 60).pipe(\n  rxop.map((_): actions.Action =>  ({ kind: 'tick' }))\n)\n\nconst keyDowns =\n  rx.fromEvent(document, \"keydown\") as rx.Observable<KeyboardEvent>;\nconst keyUps =\n  rx.fromEvent(document, \"keyup\") as rx.Observable<KeyboardEvent>;\n\nfunction keyToInput(key: string): input.Button | null {\n  switch (key) {\n    case 'ArrowLeft':\n      return 'LEFT';\n    case 'ArrowRight':\n      return 'RIGHT';\n    case 'ArrowDown':\n      return 'DOWN';\n    case 'ArrowUp':\n      return 'SPIN';\n    case ' ':\n      return 'DROP';\n    default:\n      return null;\n  }\n}\n\nfunction levelToGravity(l: number): number {\n  return Math.floor(48 * Math.pow(0.9, l));\n}\n\nfunction gravityToLevel(g: number): number {\n  // Math.abs fixes a weird issue involving -0.\n  return Math.abs(Math.floor(Math.log(g / 48) / Math.log(0.9)));\n}\n\nconst rawInputs: rx.Observable<input.RawInput> = rx.merge(keyUps, keyDowns).pipe(\n  rxop.map(e => ({ button: keyToInput(e.key), pressed: e.type === 'keydown' } as input.RawInput)),\n  rxop.filter(i => i.button != null),\n)\n\nconst inputActions = input.parseInput(rawInputs).pipe(\n  rxop.map((input) : actions.Action => ({ kind: 'input', input }))\n);\n\nconst allActions = rx.merge(manualActions, inputActions, ticks);\n\nconst levelTable = Array.from({ length: 37 }, (_, idx): game.LevelInfo => ({\n  number: idx + 1,\n  gravity: levelToGravity(idx),\n  multiplier: gravityToLevel(levelToGravity(idx)) + 1\n}));\n\nconst gameView = new game.View(levelTable)\nconst gameController = new game.Controller(\n  new randomizer.NBagRandomizer(new Prando(), 2),\n  gameView);\n\nconst uiController = new ui.Controller(gameView, gameController);\nconst initial = uiController.initialState();\n\nconst states = allActions.pipe(\n  rxop.scan<actions.Action, ui.State>((s, a) => {\n    switch (a.kind) {\n    case \"tick\":\n      return uiController.tick(s);\n    case \"input\":\n      return uiController.input(s, a.input);\n    case \"ui\":\n      return uiController.start(s);\n    }\n  }, initial),\n  rxop.startWith(initial));\n\nconst doms = states.pipe(rxop.map(s =>\n  <App key=\"app\"\n    state = {s}\n    view = {gameView}\n    dispatch={a => manualActions.next(a)} />));\n\nconst root = document.getElementById('root') as HTMLElement;\n\ndoms.subscribe((d) => ReactDOM.render(d, root));\n\nregisterServiceWorker();\n","\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\n\nexport type DirectionButton = 'LEFT' | 'RIGHT' | 'DOWN'\nexport type DirectionValue = 'NONE' | DirectionButton\nexport type ActionButton = 'SPIN' | 'DROP'\nexport type ActionValue = 'NONE' | ActionButton\nexport type Button = DirectionButton | ActionButton\nexport type RawInput = {\n  button: Button\n  pressed: boolean\n}\n\nexport type ControllerInput = {\n  direction: DirectionValue\n  action: ActionValue\n}\n\nexport function parseInput(raw: rx.Observable<RawInput>):\n  rx.Observable<ControllerInput> {\n  // Filter out the OS's key repetitions. There's a \"repeated\" boolean on\n  // the event, but it doesn't have universal support so we figure it out.\n  const deduped: rx.Observable<RawInput> = raw.pipe(\n    rxop.groupBy(i => i.button),\n    rxop.map(group => group.pipe(rxop.distinctUntilKeyChanged('pressed'))),\n    rxop.mergeAll(),\n  );\n\n  const [dir, action] =\n    rxop.partition<RawInput>(i =>\n      i.button === 'LEFT'\n      || i.button === 'RIGHT'\n      || i.button === 'DOWN')(deduped);\n\n  const currentDir: rx.Observable<DirectionValue> = dir.pipe(\n    rxop.scan<RawInput, DirectionValue>((acc, val) => {\n      const newButton = val.button as DirectionButton;\n      if (val.pressed) {\n        // Newly pressed buttons override.\n        return newButton;\n      } else if (acc === val.button) {\n        // If we released the last key we pressed, change to 'NONE'.\n        return 'NONE';\n      } else {\n        // Otherwise, ignore.\n        return acc;\n      }\n    }, 'NONE'),\n    rxop.startWith('NONE'),\n  );\n\n  const currentAction: rx.Observable<ActionValue> = action.pipe(\n    rxop.filter(i => i.pressed),\n    rxop.map(i => i.button as ActionButton),\n  );\n\n  const currentDirInputs: rx.Observable<ControllerInput> = currentDir.pipe(\n    rxop.map(direction => ({ direction, action: 'NONE' })),\n  );\n\n  const currentActionInputs: rx.Observable<ControllerInput> = currentAction.pipe(\n    rxop.withLatestFrom(currentDir),\n    rxop.map(([action, direction]) => ({ direction, action })),\n  );\n\n  return rx.merge(currentDirInputs, currentActionInputs);\n}\n"],"sourceRoot":""}