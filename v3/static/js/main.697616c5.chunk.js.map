{"version":3,"sources":["registerServiceWorker.ts","Board.tsx","shape.ts","shapes.ts","game.ts","PiecePreview.tsx","App.tsx","randomizer.ts","ui.ts","pages/index.tsx","pages/shape-test.tsx","index.ts","input.ts"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","cellClassName","c","kind","concat","shapeIdx","Board","react","className","cells","map","row","rowIdx","key","cell","cellIdx","mirrored","s","_ref","_ref2","Object","slicedToArray","bbox","rows","_ref5","_ref6","cols","_ref7","_ref8","Math","min","apply","toConsumableArray","max","introOffsets","width","_bbox","_bbox2","minCol","maxRow","maxCol","floor","rotate","count","_center","_bbox5","_bbox6","minRow","squareSide","ceil","center","_center2","centerRow","centerCol","res","_ref11","_ref12","r","i","_ref13","_ref14","_ref15","_ref16","pentominoF","pentominoL","pentominoN","pentominoP","pentominoY","pentominoZ","PENTOMINOES","shape","tetrominoJ","tetrominoL","tetrominoS","tetrominoZ","shapes","View","levelTable","classCallCheck","this","createClass","value","l","lines","length","Controller","rand","view","firstShapeIdx","nextShape","_shape$introOffsets","_shape$introOffsets2","firstDRow","firstDCol","height","nextShapeIdx","activeShape","dRow","dCol","rotation","dasDirection","dasDelay","softDrop","entryDelay","gravity","startingLevel","board","makeGrid","score","toppedOut","_this","produce","doDAS","doEntry","doGravity","doLockDown","_input","input","_x","_x2","arguments","toString","_this2","left","attemptMoveActive","right","down","action","attemptTranslateDirection","doDrop","getLevelInfo","flattenBoard","_shape$introOffsets3","_shape$introOffsets4","fullRows","_loop","col","push","newBoard","src","dest","includes","multiplier","pow","activeShapeClips","Array","fill","getShape","filter","_ref3","_ref4","slice","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","a","shp","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop2","_ref9","v","_iterator2","_ret","dRot","newActive","d","PiecePreview","_shape$justified","_bbox3","_bbox4","_ref10","SHAPES","_shape$justified2","justified","grid","from","src_Board","App","dispatch","autoFocus","onClick","game","src_PiecePreview","number","hidden","NBagRandomizer","n","bag","_","k","array","j","shuffle","pop","gameView","gameController","newState","tick","keyToInput","levelToGravity","id","sIdx","shapeTest","root","document","getElementById","ReactDOM","shape_test_App","pathname","manualActions","rx","ticks","pipe","rxop","keyDowns","keyUps","inputActions","raw","deduped","button","group","_rxop$partition","_rxop$partition2","dir","init","currentDir","acc","val","objectSpread","pressed","currentAction","currentDirInputs","direction","currentActionInputs","e","type","allActions","idx","g","abs","randomizer","Prando","uiController","ui","initial","initialState","doms","start","src_App","subscribe","index","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.697616c5.chunk.js","sourcesContent":["// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\n\nimport * as game from './game';\n\nimport './Board.css';\n\nexport type State = {\n  cells : game.GridCell[][],\n};\n\nfunction cellClassName(c: game.GridCell): string {\n  switch (c.kind) {\n    case 'empty': return 'cell empty';\n    case 'shape': return `cell color-${c.shapeIdx}`\n  }\n}\n\nfunction Board(state : State): JSX.Element {\n  return (\n    <div className=\"Board\">\n      {state.cells.map(\n        (row, rowIdx) => <div className=\"row\" key={rowIdx}>\n          {\n            row.map((cell, cellIdx) =>\n              <div className={cellClassName(cell)} key={cellIdx}/>\n            )\n          }\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Board;\n","\nexport type Shape = Array<[number, number]>;\n\nexport function mirrored(s: Shape): Shape {\n  return s.map(([row, col]) => [row, -col]);\n}\n\nexport function transpose(s: Shape): Shape {\n  return s.map(([row, col]) => [col, row]);\n}\n\nexport function bbox(s: Shape): [number, number, number, number] {\n  const rows = s.map(([row, _]) => row);\n  const cols = s.map(([_, col]) => col);\n  return [Math.min(...rows), Math.min(...cols),\n  Math.max(...rows), Math.max(...cols)];\n}\n\nexport function introOffsets(s: Shape, width: number): [number, number] {\n  const [, minCol, maxRow, maxCol] = bbox(s);\n  const dRow = -maxRow;\n  const dCol = Math.floor((width - maxCol + minCol) / 2) - minCol;\n  return [dRow, dCol];\n}\n\nexport function justified(s: Shape): [Shape, number, number] {\n  const [minRow, minCol, maxRow, maxCol] = bbox(s);\n  return [\n    s.map(([row, col]) => [row - minRow, col - minCol]),\n    maxRow - minRow + 1,\n    maxCol - minCol + 1,\n  ];\n}\n\nfunction center(s: Shape): [number, number] {\n  const [minRow, minCol, maxRow, maxCol] = bbox(s);\n\n  // The side length of a square surrounding the shape. Assumes shapes are\n  // always oriented horizontally.\n  const squareSide = maxCol - minCol;\n  const rowOffsetIntoSquare = Math.ceil((squareSide - (maxRow - minRow)) / 2);\n  const squareMinRow = minRow - rowOffsetIntoSquare;\n  const centerRow = squareMinRow + squareSide / 2;\n  const centerCol = minCol + squareSide / 2;\n\n  return [centerRow, centerCol];\n}\n\nexport function rotate(s: Shape, count: number) {\n  const [centerRow, centerCol] = center(s);\n\n  let res = s.map(([r, c]) => ([r - centerRow, c - centerCol])) as Shape;\n  for (let i = 0; i < count; i++) {\n    res = (res.map(([row, col]) => [col, -row]) as Shape);\n  }\n  return res.map(([r, c]) => ([r + centerRow, c + centerCol])) as Shape;\n}\n","\nimport * as shape from './shape';\n\n// Pentominos.\n\nconst pentominoF: shape.Shape = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 1],\n];\n\nconst pentominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [0, 4],\n];\n\nconst pentominoL: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [1, 3],\n];\n\nconst pentominoN: shape.Shape = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst pentominoP: shape.Shape = [\n  [0, 0],\n  [1, 0],\n  [0, 1],\n  [1, 1],\n  [1, -1],\n];\n\nconst pentominoT: shape.Shape = [\n  [0, -1],\n  [0, 1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoU: shape.Shape = [\n  [0, 0],\n  [0, -1],\n  [0, 1],\n  [-1, 1],\n  [-1, -1],\n];\n\nconst pentominoV: shape.Shape = [\n  [0, -2],\n  [0, -1],\n  [0, 0],\n  [1, 0],\n  [2, 0],\n];\n\nconst pentominoW: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n  [1, 2],\n  [2, 2],\n];\n\nconst pentominoX: shape.Shape = [\n  [0, 0],\n  [-1, 0],\n  [1, 0],\n  [0, -1],\n  [0, 1],\n];\n\nconst pentominoY: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n  [-1, 1],\n];\n\nconst pentominoZ: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [-1, 0],\n  [1, 2],\n];\n\nconst pentominoF2: shape.Shape = shape.mirrored(pentominoF);\n\nconst pentominoJ: shape.Shape = shape.mirrored(pentominoL);\n\nconst pentominoN2: shape.Shape = shape.mirrored(pentominoN);\n\nconst pentominoQ: shape.Shape = shape.mirrored(pentominoP);\n\nconst pentominoY2: shape.Shape = shape.mirrored(pentominoY);\n\nconst pentominoS: shape.Shape = shape.mirrored(pentominoZ);\n\nconst PENTOMINOES: shape.Shape[] = [\n  pentominoF,\n  pentominoF2,\n  pentominoL,\n  pentominoJ,\n  pentominoN,\n  pentominoN2,\n  pentominoP,\n  pentominoQ,\n  pentominoY,\n  pentominoY2,\n  pentominoZ,\n  pentominoS,\n  pentominoT,\n  pentominoU,\n  pentominoV,\n  pentominoW,\n  pentominoX,\n  pentominoI,\n];\n\n// Tetrominos\n\nconst tetrominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3],\n];\n\nconst tetrominoJ: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 2],\n];\n\nconst tetrominoL: shape.Shape = shape.mirrored(tetrominoJ);\n\nconst tetrominoO: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n];\n\nconst tetrominoS: shape.Shape = [\n  [1, 0],\n  [1, 1],\n  [0, 1],\n  [0, 2],\n];\n\nconst tetrominoZ: shape.Shape = shape.mirrored(tetrominoS);\n\nconst tetrominoT: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [1, 1],\n];\n\nconst TETROMINOES: shape.Shape[] = [\n  tetrominoI,\n  tetrominoJ,\n  tetrominoL,\n  tetrominoO,\n  tetrominoS,\n  tetrominoZ,\n  tetrominoT,\n];\n\n// Trominoes\n\nconst trominoI: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n];\n\nconst trominoL: shape.Shape = [\n  [0, 0],\n  [0, 1],\n  [1, 1],\n];\n\nconst TROMINOES: shape.Shape[] = [\n  trominoI,\n  trominoL,\n];\n\nconst domino: shape.Shape = [\n  [0, 0],\n  [0, 1],\n];\n\nconst monomino: shape.Shape = [\n  [0, 0]\n];\n\nconst shapes: shape.Shape[] = [\n  monomino,\n  domino,\n  ...TROMINOES,\n  ...TETROMINOES,\n  ...PENTOMINOES\n];\n\nexport default shapes;\n","\nimport produce from 'immer';\n\nimport * as input from './input';\nimport * as randomizer from './randomizer';\nimport * as shape from './shape';\nimport shapes from './shapes';\n\nconst DAS_INITIAL_DELAY = 16;\nconst DAS_REFRESH_DELAY = 6;\nconst ENTRY_DELAY = 18;\nconst LINES_PER_LEVEL = 10;\nconst SOFT_DROP_MULTIPLIER = 5;\n\ntype ActiveShape = {\n  shapeIdx: number\n  dRow: number\n  dCol: number\n  rotation: 0 | 1 | 2 | 3\n}\ntype EmptyCell = { kind: 'empty' };\ntype ShapeCell = {\n  kind: 'shape'\n  shapeIdx: number\n}\nexport type GridCell = EmptyCell | ShapeCell;\n\nexport type LevelInfo = {\n  number: number\n  gravity: number\n  multiplier: number\n};\n\nexport type State = {\n  width: number\n  height: number\n  nextShapeIdx: number\n  activeShape: ActiveShape\n\n  dasDirection: 'NONE' | 'LEFT' | 'RIGHT'\n  dasDelay: number\n\n  softDrop: boolean,\n\n  entryDelay: number\n  gravity: number\n  board: GridCell[][]\n\n  score: number\n  lines: number\n  toppedOut: boolean\n};\n\nexport class View {\n  levelTable: LevelInfo[]\n\n  constructor(levelTable: LevelInfo[]) {\n    this.levelTable = levelTable;\n  }\n\n  startingLevel(): LevelInfo {\n    return this.levelTable[0];\n  }\n\n  getLevelInfo(s: State): LevelInfo {\n    const l = Math.floor(s.lines / LINES_PER_LEVEL);\n    return this.levelTable[\n      l < this.levelTable.length ? l : this.levelTable.length - 1];\n  }\n}\n\nexport class Controller {\n  rand: randomizer.Randomizer\n  view: View\n\n  constructor(rand: randomizer.Randomizer, view: View) {\n    this.rand = rand;\n    this.view = view;\n  }\n\n  newState(): State {\n    const firstShapeIdx = this.rand.nextShape();\n    const [firstDRow, firstDCol] =\n      shape.introOffsets(shapes[firstShapeIdx], 12);\n\n    return {\n      width: 12,\n      height: 24,\n      nextShapeIdx: this.rand.nextShape(),\n      activeShape: {\n        shapeIdx: firstShapeIdx,\n        dRow: firstDRow,\n        dCol: firstDCol,\n        rotation: 0,\n      },\n      dasDirection: 'NONE',\n      dasDelay: 0,\n      softDrop: false,\n      entryDelay: ENTRY_DELAY,\n      gravity: this.view.startingLevel().gravity,\n      board: makeGrid(12, 24),\n      score: 0,\n      lines: 0,\n      toppedOut: false,\n    };\n  }\n\n  tick(s: State): State {\n    if (s.toppedOut) { return s; }\n\n    return produce(s, (s: State) => {\n      this.doDAS(s);\n      if (!this.doEntry(s)) {\n        return;\n      }\n      if (!this.doGravity(s)) {\n        this.doLockDown(s);\n      }\n    });\n  }\n\n  input(s: State, i: input.ControllerInput): State {\n    if (s.toppedOut) { return s; }\n\n    return produce(s, s => {\n      if (i.left) {\n        if (s.dasDirection === 'NONE') {\n          attemptMoveActive(s, 0, -1, 0);\n          s.dasDelay = DAS_INITIAL_DELAY;\n        }\n        s.dasDirection = 'LEFT';\n      } else if (i.right) {\n        if (s.dasDirection === 'NONE') {\n          attemptMoveActive(s, 0, 1, 0);\n          s.dasDelay = DAS_INITIAL_DELAY;\n        }\n        s.dasDirection = 'RIGHT';\n      } else {\n        s.dasDirection = 'NONE';\n      }\n\n      s.softDrop = i.down;\n\n      switch (i.action) {\n        case 'NONE':\n          break;\n        case 'SPIN':\n          attemptTranslateDirection(s, i.action);\n          break;\n        case 'DROP':\n          this.doDrop(s);\n          break;\n      }\n    });\n  }\n\n  private doEntry(s: State): boolean {\n    if (0 < s.entryDelay) {\n      s.entryDelay--;\n      return false;\n    }\n    return true;\n  }\n\n  private doDAS(s: State) {\n    if (s.dasDirection === 'NONE') {\n      return;\n    }\n    if (s.dasDelay === 0) {\n      s.dasDelay = DAS_REFRESH_DELAY;\n      attemptTranslateDirection(s, s.dasDirection);\n    } else {\n      s.dasDelay--;\n    }\n  }\n\n  private doGravity(s: State): boolean {\n    if (0 < s.gravity) {\n      s.gravity -= s.softDrop ? SOFT_DROP_MULTIPLIER : 1;\n      return true;\n    }\n\n    s.gravity = this.view.getLevelInfo(s).gravity;\n    return attemptMoveActive(s, 1, 0, 0);\n  }\n\n\n  private doDrop(s: State) {\n    while (attemptMoveActive(s, 1, 0, 0)) { }\n    this.doLockDown(s);\n  }\n\n  private doLockDown(s: State) {\n    s.board = flattenBoard(s);\n    s.entryDelay = ENTRY_DELAY;\n    const [dRow, dCol] = shape.introOffsets(shapes[s.nextShapeIdx], s.width);\n    s.activeShape = {\n      shapeIdx: s.nextShapeIdx,\n      dRow,\n      dCol,\n      rotation: 0,\n    };\n    s.nextShapeIdx = this.rand.nextShape();\n\n    const fullRows: number[] = [];\n    for (let row = 0; row < s.height; row++) {\n      let allFull = (() => {\n        for (let col = 0; col < s.width; col++) {\n          if (s.board[row][col].kind === 'empty') {\n            return false;\n          }\n        }\n        return true;\n      })();\n\n      if (allFull) {\n        fullRows.push(row);\n      }\n    }\n\n    const newBoard = makeGrid(s.width, s.height);\n    let src = s.height - 1;\n    let dest = s.height - 1;\n    while (src >= 0) {\n      if (fullRows.includes(src)) {\n        src--;\n        continue;\n      }\n\n      for (let col = 0; col < s.width; col++) {\n        newBoard[dest][col] = s.board[src][col];\n      }\n      src--;\n      dest--;\n    }\n    s.board = newBoard;\n    s.score += (this.view.getLevelInfo(s).multiplier *\n      (Math.pow(2, fullRows.length) - 1));\n    s.lines += fullRows.length;\n    s.toppedOut = activeShapeClips(s, s.activeShape);\n  }\n}\n\nfunction makeGrid(width: number, height: number): GridCell[][] {\n  const board: GridCell[][] = [];\n  for (let i = 0; i < height; i++) {\n    board.push(Array(width).fill({ kind: 'empty' }));\n  }\n  return board;\n}\n\nexport function getShape(s: ActiveShape): shape.Shape {\n  let res = shapes[s.shapeIdx];\n  res = shape.rotate(res, s.rotation);\n  res = (res.map(([row, col]) => [row + s.dRow, col + s.dCol]) as shape.Shape);\n  return res.filter(([row, _]) => row >= 0);\n}\n\nexport function flattenBoard(s: State): GridCell[][] {\n  const res = s.board.map(row => row.slice());\n\n  const shape = getShape(s.activeShape);\n\n  for (const [row, col] of shape) {\n    res[row][col] = {\r\n      kind: 'shape',\n      shapeIdx: s.activeShape.shapeIdx,\n    }\n  }\n\n  return res;\n}\n\nfunction activeShapeClips(s: State, a: ActiveShape): boolean {\n  const shp = getShape(a);\n\n  for (let [row, col] of shp) {\n    const clips = (function() {\n      if (s.height <= row || col < 0 || s.width <= col) {\n        return true;\n      }\n      if (row < 0) {\n        return false;\n      }\n      return s.board[row][col].kind !== 'empty';\n    })();\n\n    if (clips) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptMoveActive(s: State, dRow: number, dCol: number, dRot: number): boolean {\n  const newActive: ActiveShape = {\n    shapeIdx: s.activeShape.shapeIdx,\n    dRow: s.activeShape.dRow + dRow,\n    dCol: s.activeShape.dCol + dCol,\n    rotation: (s.activeShape.rotation + dRot) % 4 as 0 | 1 | 2 | 3,\n  }\n\n  if (activeShapeClips(s, newActive)) {\n    return false;\n  }\n\n  s.activeShape = newActive;\n  return true;\n}\n\nfunction attemptTranslateDirection(s: State, d: input.DirectionButton | 'SPIN'): boolean {\n  switch (d) {\n    case 'LEFT':\n      return attemptMoveActive(s, 0, -1, 0);\n    case 'DOWN':\n      return attemptMoveActive(s, 1, 0, 0);\n    case 'RIGHT':\n      return attemptMoveActive(s, 0, 1, 0);\n    case 'SPIN':\n      return attemptMoveActive(s, 0, 0, 1);\n  }\n}\n","import * as React from 'react';\n\nimport * as game from './game';\nimport * as shape from './shape';\nimport SHAPES from './shapes';\nimport Board from './Board';\n\nexport type Properties = {\n  shapeIdx: number,\n};\n\nfunction PiecePreview({ shapeIdx }: Properties): JSX.Element {\n  const [justified, rows, cols] = shape.justified(SHAPES[shapeIdx]);\n  const grid = Array.from({ length: rows },\n    () => Array(cols).fill({ kind: 'empty' } as game.GridCell));\n\n  for (const [row, col] of justified) {\n    grid[row][col] = { kind: 'shape', shapeIdx };\n  }\n  return (\n    <div className=\"PiecePreview\">\n      <Board cells={ grid } />\n    </div>\n  );\n}\n\nexport default PiecePreview;\n","import * as React from 'react';\n\nimport * as actions from './actions';\nimport Board from './Board';\nimport * as game from './game';\nimport PiecePreview from './PiecePreview';\nimport * as ui from './ui';\n\nimport './App.css';\n\nexport type Properties = {\n  state: ui.State\n  view: game.View\n  dispatch: (a:actions.Action) => void\n}\n\nfunction App({state, view, dispatch}: Properties): JSX.Element {\n  switch (state.kind) {\n  case 'new_game':\n    return (\n      <div className= \"App\">\n        <div className=\"new-game\">\n          <h1>Pentris!</h1>\n          <p>v3alpha: Now with Levels!!</p>\n\n\n          <button className=\"btn btn-primary\" autoFocus onClick={()=> dispatch({kind: 'ui', action: 'START'})}>\n            New Game\n          </button>\n        </div>\n      </div>\n    )\n  case 'in_game':\n    const s = state.game;\n    return (<div className= \"App\">\n      <main>\n        <Board cells={ game.flattenBoard(s) } />\n      </main>\n      <aside>\n        <h1>Pentris</h1>\n        <p className=\"copy\">\n          It's Alpha. It's Delicious. It's Pentris.\n        </p>\n        <h2>Preview</h2>\n        <PiecePreview shapeIdx={s.nextShapeIdx}/>\n        <h3>Score</h3>\n        <h3>Lines Cleared</h3>\n        <p className=\"score\">{s.score}</p>\n        <p className=\"score\">{s.lines}</p>\n        <h3>Level</h3>\n        <h3>Speed</h3>\n        <p className=\"score\">{view.getLevelInfo(s).number}</p>\n        <p className=\"score\">{view.getLevelInfo(s).multiplier}</p>\n      </aside>\n      <div className=\"game-over\" hidden={!s.toppedOut}>\n        <div className=\"card\">\n          <h1>OWNED!</h1>\n          <p>Score: {s.score}</p>\n          <button className=\"btn btn-primary\"\n            onClick={()=> dispatch({kind: 'ui', action: 'START'})}>\n            New Game\n          </button>\n        </div>\n      </div>\n    </div>);\n  }\n}\n\nexport default App;\n","\nimport Prando from 'prando';\n\nimport shapes from './shapes';\n\nexport interface Randomizer {\n  nextShape(): number\n}\n\nexport class TrueRandomizer implements Randomizer {\n  rand: Prando\n\n  constructor(rand: Prando) {\n    this.rand = rand;\n  }\n\n  nextShape(): number {\n    return this.rand.nextInt(0, shapes.length - 1);\n  }\n}\n\nexport class NBagRandomizer implements Randomizer {\n  rand: Prando\n  n: number\n  bag: number[]\n\n  constructor(rand: Prando, n: number) {\n    this.rand = rand;\n    this.n = n;\n    this.bag = [];\n  }\n\n  nextShape(): number {\n    if (this.bag.length === 0) {\n      this.bag = Array.from({ length: this.n * shapes.length },\n        (_, k) => k % shapes.length\n      )\n      shuffle(this.bag, this.rand);\n    }\n    return this.bag.pop() as number;\n  }\n}\n\nfunction shuffle<T>(array: T[], rand: Prando) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(rand.next() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n","\nimport produce from 'immer';\n\nimport * as game from './game';\nimport * as input from './input';\n\ntype NewGameState = {\n  kind: \"new_game\"\n}\n\ntype InGameState = {\n  kind: \"in_game\"\n  game: game.State\n}\n\nexport type State = NewGameState | InGameState;\n\nexport type Action = Tick | Input | UIAction;\n\ntype UIAction = {\n  kind: 'ui'\n  action: 'START'\n}\ntype Tick = { kind: 'tick' };\ntype Input = {\n  kind: 'input'\n  input: input.ControllerInput\n}\n\nexport class Controller {\n  gameView: game.View\n  gameController: game.Controller\n\n  constructor(gameView: game.View, gameController: game.Controller) {\n    this.gameView = gameView;\n    this.gameController = gameController;\n  }\n\n  initialState(): State {\n    return { kind: \"new_game\" };\n  }\n\n  start(_: State): State {\n    return {\n      kind: 'in_game',\n      game: this.gameController.newState(),\n    }\n  }\n\n  tick(s: State): State {\n    return produce(s, (s: State) => {\n      if (s.kind !== 'in_game') { return; }\n      s.game = this.gameController.tick(s.game);\n    });\n  }\n\n  input(s: State, i: input.ControllerInput): State {\n    return produce(s, (s: State) => {\n      if (s.kind !== 'in_game') { return; }\n      s.game = this.gameController.input(s.game, i);\n    });\n  }\n}\n","import Prando from 'prando';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\n\nimport * as actions from '../actions';\nimport App from '../App';\nimport * as game from '../game';\nimport * as input from '../input';\nimport * as randomizer from '../randomizer';\nimport * as ui from '../ui';\n\nfunction keyToInput(key: string): input.Button | null {\n  switch (key) {\n    case 'ArrowLeft':\n      return 'LEFT';\n    case 'ArrowRight':\n      return 'RIGHT';\n    case 'ArrowDown':\n      return 'DOWN';\n    case 'ArrowUp':\n      return 'SPIN';\n    case ' ':\n      return 'DROP';\n    default:\n      return null;\n  }\n}\n\nfunction levelToGravity(l: number): number {\n  return Math.floor(48 * Math.pow(0.9, l));\n}\n\nfunction gravityToLevel(g: number): number {\n  // Math.abs fixes a weird issue involving -0.\n  return Math.abs(Math.floor(Math.log(g / 48) / Math.log(0.9)));\n}\n\nexport default function index() {\n  const manualActions = new rx.Subject<actions.Action>();\n  const ticks = rx.timer(0, 1000 / 60).pipe(\n    rxop.map((_): actions.Action => ({ kind: 'tick' }))\n  )\n\n  const keyDowns =\n    rx.fromEvent(document, \"keydown\") as rx.Observable<KeyboardEvent>;\n  const keyUps =\n    rx.fromEvent(document, \"keyup\") as rx.Observable<KeyboardEvent>;\n\n  const rawInputs: rx.Observable<input.RawInput> = rx.merge(keyUps, keyDowns).pipe(\n    rxop.map(e => ({ button: keyToInput(e.key), pressed: e.type === 'keydown' } as input.RawInput)),\n    rxop.filter(i => i.button != null),\n  )\n\n  const inputActions = input.parseInput(rawInputs).pipe(\n    rxop.map((input): actions.Action => ({ kind: 'input', input }))\n  );\n\n  const allActions = rx.merge(manualActions, inputActions, ticks);\n\n  const levelTable = Array.from({ length: 37 }, (_, idx): game.LevelInfo => ({\n    number: idx + 1,\n    gravity: levelToGravity(idx),\n    multiplier: gravityToLevel(levelToGravity(idx)) + 1\n  }));\n\n  const gameView = new game.View(levelTable)\n  const gameController = new game.Controller(\n    new randomizer.NBagRandomizer(new Prando(), 2),\n    gameView);\n\n  const uiController = new ui.Controller(gameView, gameController);\n  const initial = uiController.initialState();\n\n  const states = allActions.pipe(\n    rxop.scan<actions.Action, ui.State>((s, a) => {\n      switch (a.kind) {\n        case \"tick\":\n          return uiController.tick(s);\n        case \"input\":\n          return uiController.input(s, a.input);\n        case \"ui\":\n          return uiController.start(s);\n      }\n    }, initial),\n    rxop.startWith(initial));\n\n  const doms = states.pipe(rxop.map(s =>\n    <App key=\"app\"\n      state = { s }\n      view = { gameView }\n      dispatch = { a => manualActions.next(a) } />));\n\n  const root = document.getElementById('root') as HTMLElement;\n\n  doms.subscribe((d) => ReactDOM.render(d, root));\n}\n","\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport shapes from '../shapes';\nimport PiecePreview from '../PiecePreview';\n\nfunction App(): JSX.Element {\n  return <div id=\"shape-tests\">\n    <h1>Shape Tests</h1>\n    {\n      shapes.map((_, sIdx) => (\n        <div className=\"shape\">\n          <PiecePreview shapeIdx={sIdx} />\n        </div>\n      ))\n    }\n  </div>;\n}\n\nfunction shapeTest() {\n  const root = document.getElementById('root') as HTMLElement;\n  ReactDOM.render(<App/>, root);\n}\n\nexport default shapeTest;\n","\nimport registerServiceWorker from './registerServiceWorker';\nimport index from './pages/index';\nimport shapeTest from './pages/shape-test';\n\nimport './index.css';\n\nif (window.location.pathname === '/shape-test') {\n  shapeTest();\n} else {\n  index();\n}\nregisterServiceWorker();\n","\nimport * as rx from 'rxjs';\nimport * as rxop from 'rxjs/operators';\n\nexport type DirectionButton = 'LEFT' | 'RIGHT' | 'DOWN'\nexport type ActionButton = 'SPIN' | 'DROP'\n\nexport type Button = DirectionButton | ActionButton\nexport type RawInput = {\n  button: Button\n  pressed: boolean\n}\n\nexport type ControllerInput = {\n  left: boolean\n  right: boolean\n  down: boolean\n  action: 'NONE' | ActionButton\n}\n\nexport function parseInput(raw: rx.Observable<RawInput>):\n  rx.Observable<ControllerInput> {\n  // Filter out the OS's key repetitions. There's a \"repeated\" boolean on\n  // the event, but it doesn't have universal support so we figure it out.\n  const deduped: rx.Observable<RawInput> = raw.pipe(\n    rxop.groupBy(i => i.button),\n    rxop.map(group => group.pipe(rxop.distinctUntilKeyChanged('pressed'))),\n    rxop.mergeAll(),\n  );\n\n  const [dir, action] =\n    rxop.partition<RawInput>(i =>\n      i.button === 'LEFT'\n      || i.button === 'RIGHT'\n      || i.button === 'DOWN')(deduped);\n\n  const init: ControllerInput = {\n    left: false,\n    right: false,\n    down: false,\n    action: 'NONE',\n  };\n\n  const currentDir: rx.Observable<ControllerInput> = dir.pipe(\n    rxop.scan<RawInput, ControllerInput>((acc, val) => {\n      if (val.button === 'DOWN') {\n        return {\n          ...acc,\n          down: val.pressed,\n        };\n      }\n\n      if (val.button === 'LEFT') {\n        if (val.pressed) {\n          return {\n            ...acc,\n            left: true,\n            right: false,\n          };\n        } else {\n          return {\n            ...acc,\n            left: false,\n          }\n        }\n      }\n\n      if (val.button === 'RIGHT') {\n        if (val.pressed) {\n          return {\n            ...acc,\n            left: false,\n            right: true,\n          };\n        } else {\n          return {\n            ...acc,\n            right: false,\n          }\n        }\n      }\n      return acc;\n    }, init),\n    rxop.startWith(init),\n  );\n\n  const currentAction: rx.Observable<ActionButton | 'NONE'> = action.pipe(\n    rxop.filter(i => i.pressed),\n    rxop.map(i => i.button as ActionButton),\n  );\n\n  const currentDirInputs: rx.Observable<ControllerInput> = currentDir.pipe(\n    rxop.map(direction => ({ ...direction, action: 'NONE' })),\n  );\n\n  const currentActionInputs: rx.Observable<ControllerInput> = currentAction.pipe(\n    rxop.withLatestFrom(currentDir),\n    rxop.map(([action, direction]) => ({ ...direction, action })),\n  );\n\n  return rx.merge(currentDirInputs, currentActionInputs);\n}\n"],"sourceRoot":""}